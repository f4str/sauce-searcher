{"version":3,"sources":["components/Status.tsx","components/Search.tsx","components/Anime.tsx","components/Manga.tsx","components/LightNovel.tsx","components/VisualNovel.tsx","components/Doujin.tsx","components/ErrorMessage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StatusColor","StatusText","Status","useState","Starting","color","setColor","text","setText","checkServer","a","fetch","process","ok","Up","Down","useEffect","Segment","inverted","style","position","top","right","Menu","Item","href","target","Icon","name","size","Popup","content","trigger","panes","menuItem","placeholder","Search","index","setIndex","setQuery","handleClick","setPlaceholder","Container","width","overflow","margin","padding","Tab","menu","attached","tabular","renderActiveOnly","onTabChange","event","data","activeIndex","Input","action","icon","onClick","onChange","value","onKeyDown","key","Anime","forwardRef","ref","query","active","found","setFound","message","setMessage","title","setTitle","titleEnglish","setTitleEnglish","url","setUrl","imageUrl","setImageUrl","type","setType","source","setSource","episodes","setEpisodes","status","setStatus","premiered","setPremiered","aired","setAired","duration","setDuration","rating","setRating","score","setScore","synopsis","setSynopsis","relations","setRelations","studios","setStudios","genres","setGenres","openings","setOpenings","endings","setEndings","fetchData","loader","Loader","inline","first","charAt","last","slice","search","response","json","title_english","image","string","useImperativeHandle","textGridRow","Grid","Row","marginBottom","className","columns","textAlign","Column","largeScreen","tablet","mobile","Image","src","fluid","label","ribbon","Header","join","Object","entries","map","r","length","x","i","Manga","volumes","setVolumes","chapters","setChapters","published","setPublished","authors","setAuthors","serializations","setSerializations","names","n","split","reverse","LightNovel","VisualNovel","blurred","setBlurred","imageNSFW","setImageNSFW","released","setReleased","description","setDescription","tags","setTags","staff","setStaff","anime","setAnime","setLength","image_nsfw","releasedDate","Date","toLocaleDateString","year","month","day","Dimmer","Dimmable","as","blurring","dimmed","Button","Doujin","id","setId","uploadDate","setUploadDate","pages","setPages","characters","setCharacters","parodies","setParodies","artists","setArtists","groups","setGroups","languages","setLanguages","categories","setCategories","upload","upload_date","arrayGridColumn","array","ErrorMessage","App","setActive","animeRef","useRef","mangaRef","lightNovelRef","visualNovelRef","doujinRef","marginTop","test","parsePattern","current","border","lineHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85cd346c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Segment, Icon, Menu, Popup, SemanticCOLORS } from 'semantic-ui-react';\n\nenum StatusColor {\n  Starting = 'yellow',\n  Up = 'green',\n  Down = 'red',\n}\n\nenum StatusText {\n  Starting = 'Serving is starting',\n  Up = 'Server is up',\n  Down = 'Server is down',\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Status = (): React.ReactElement => {\n  const [color, setColor] = useState<SemanticCOLORS>(StatusColor.Starting);\n  const [text, setText] = useState<string>(StatusText.Starting);\n\n  const checkServer = async () => {\n    try {\n      const response = await fetch(`${api}`);\n      if (response.ok) {\n        setColor(StatusColor.Up);\n        setText(StatusText.Up);\n      } else {\n        setColor(StatusColor.Down);\n        setText(StatusText.Down);\n      }\n    } catch {\n      setColor(StatusColor.Down);\n      setText(StatusText.Down);\n    }\n  };\n\n  useEffect(() => {\n    checkServer();\n  }, []);\n\n  return (\n    <Segment inverted style={{ position: 'absolute', top: 0, right: 0 }}>\n      <Menu.Item href='https://github.com/f4str/sauce-searcher' target='_blank'>\n        <Icon name='github' inverted size='large' />\n      </Menu.Item>\n\n      <Popup content={text} inverted trigger={<Icon name='circle' size='large' color={color} />} />\n    </Segment>\n  );\n};\n\nexport default Status;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Input, Segment, Tab, TabProps } from 'semantic-ui-react';\n\ninterface SearchProps {\n  index: number;\n  setIndex: React.Dispatch<React.SetStateAction<number>>;\n  setQuery: React.Dispatch<React.SetStateAction<string>>;\n  handleClick: () => void;\n}\n\ninterface Pane {\n  menuItem: string;\n  placeholder: string;\n}\n\nconst panes: Pane[] = [\n  { menuItem: 'Auto', placeholder: '{anime}, <manga>, [light novel], |visual novel|, (doujin)' },\n  { menuItem: 'Anime', placeholder: 'Search by anime name' },\n  { menuItem: 'Manga', placeholder: 'Search by manga name' },\n  { menuItem: 'Light Novel', placeholder: 'Search by light novel name' },\n  { menuItem: 'Visual Novel', placeholder: 'Search by visual novel name' },\n  { menuItem: 'Doujin', placeholder: 'Search by doujin digits' },\n];\n\nconst Search = ({ index, setIndex, setQuery, handleClick }: SearchProps): React.ReactElement => {\n  const [placeholder, setPlaceholder] = useState<string>('Search');\n\n  useEffect(() => {\n    setPlaceholder(panes[index].placeholder);\n  }, [index]);\n\n  const handleTabChange = (event: React.MouseEvent<HTMLDivElement>, data: TabProps) => {\n    setIndex(data.activeIndex as number);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      handleClick();\n    }\n  };\n\n  return (\n    <Container style={{ width: '50%' }}>\n      <Segment inverted style={{ overflow: 'auto', margin: 'auto', padding: '1px' }}>\n        <Tab\n          panes={panes}\n          menu={{\n            attached: true,\n            tabular: true,\n            inverted: true,\n          }}\n          renderActiveOnly\n          onTabChange={handleTabChange}\n        />\n      </Segment>\n      <Input\n        action={{\n          icon: 'search',\n          onClick: () => {\n            handleClick();\n          },\n        }}\n        style={{ width: '100%' }}\n        size='small'\n        placeholder={placeholder}\n        inverted\n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n      />\n    </Container>\n  );\n};\n\nexport default Search;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader } from 'semantic-ui-react';\n\ninterface AnimeProps {\n  query: string;\n  active: string | null;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Anime = forwardRef(({ query, active }: AnimeProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [source, setSource] = useState<string>('');\n  const [episodes, setEpisodes] = useState<number>(0);\n  const [status, setStatus] = useState<string>('');\n  const [premiered, setPremiered] = useState<string>('');\n  const [aired, setAired] = useState<string>('');\n  const [duration, setDuration] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [studios, setStudios] = useState<string[]>([]);\n  const [genres, setGenres] = useState<string[]>([]);\n  const [openings, setOpenings] = useState<string[]>([]);\n  const [endings, setEndings] = useState<string[]>([]);\n\n  const fetchData = async () => {\n    const loader = (\n      <Loader key='loader' active inline='centered' size='large'>\n        Searching\n      </Loader>\n    );\n    setMessage(loader);\n    setFound(false);\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '{' && last === '}' ? query.slice(1, -1) : query;\n\n    const response = await fetch(`${api}/anime/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setSource(data.source);\n      setEpisodes(data.episodes ? data.episodes : '?');\n      setStatus(data.status);\n      setPremiered(data.premiered);\n      setAired(data.aired ? data.aired.string : '?');\n      setDuration(data.duration);\n      setRating(data.rating);\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setStudios(data.studios);\n      setGenres(data.genres);\n      setOpenings(data.openings);\n      setEndings(data.endings);\n    } else {\n      setFound(false);\n      setMessage('Anime not found');\n    }\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      fetchData,\n    };\n  });\n\n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{ marginBottom: '10px' }}>\n          <span className='bold'>{name}</span>\n          {data}\n        </Grid.Row>\n      );\n    }\n\n    return null;\n  };\n\n  if (active === 'anime') {\n    if (found)\n      return (\n        <Container className='smaller-font'>\n          <Grid columns={2} textAlign='left'>\n            <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n              <Image\n                src={imageUrl}\n                fluid\n                label={{\n                  color: 'blue',\n                  content: score,\n                  icon: 'star',\n                  ribbon: true,\n                }}\n              />\n            </Grid.Column>\n            <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <Header inverted textAlign='left'>\n                  <a href={url} className='link'>\n                    {title}\n                  </a>\n                </Header>\n              </Grid.Row>\n              {textGridRow('English Title: ', titleEnglish)}\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <span className='bold'>Type: </span>\n                {type} | <span className='bold'>Episodes: </span>\n                {episodes}\n              </Grid.Row>\n              {textGridRow('Status: ', status)}\n              {textGridRow('Rating: ', rating)}\n              {textGridRow('Studios: ', studios.join(', '))}\n              {textGridRow('Source: ', source)}\n              {textGridRow('Duration: ', duration)}\n              {textGridRow('Season: ', premiered)}\n              {textGridRow('Aired: ', aired)}\n              {textGridRow('Genres: ', genres.join(', '))}\n            </Grid.Column>\n          </Grid>\n          <Grid columns={1} textAlign='left'>\n            <Grid.Column>\n              <span className='bold'>Synopsis:</span> {synopsis}\n            </Grid.Column>\n            <Grid.Column>\n              {Object.entries(relations).map((r) => {\n                return textGridRow(`${r[0]}: `, r[1].join(', '));\n              })}\n            </Grid.Column>\n            <Grid.Column>\n              <Grid.Row style={{ marginBottom: '5px' }}>\n                <span className='bold'>Openings</span>\n              </Grid.Row>\n              {openings && openings.length > 0\n                ? openings.map((x, i) => {\n                    return (\n                      <Grid.Row key={`op${i + 1}`} style={{ marginBottom: '5px' }}>\n                        {i + 1}. {x}\n                      </Grid.Row>\n                    );\n                  })\n                : 'None'}\n            </Grid.Column>\n            <Grid.Column>\n              <Grid.Row style={{ marginBottom: '5px' }}>\n                <span className='bold'>Endings</span>\n              </Grid.Row>\n              {endings && endings.length > 0\n                ? endings.map((x, i) => {\n                    return (\n                      <Grid.Row key={`ed${i + 1}`} style={{ marginBottom: '5px' }}>\n                        {i + 1}. {x}\n                      </Grid.Row>\n                    );\n                  })\n                : 'None'}\n            </Grid.Column>\n          </Grid>\n        </Container>\n      );\n\n    return <div>{message}</div>;\n  }\n\n  return <div />;\n});\n\nexport default Anime;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader } from 'semantic-ui-react';\n\ninterface MangaProps {\n  query: string;\n  active: string | null;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Manga = forwardRef(({ query, active }: MangaProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [volumes, setVolumes] = useState<number | string>(0);\n  const [chapters, setChapters] = useState<number | string>(0);\n  const [status, setStatus] = useState<string>('');\n  const [published, setPublished] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [genres, setGenres] = useState<string[]>([]);\n  const [authors, setAuthors] = useState<string[]>([]);\n  const [serializations, setSerializations] = useState<string[]>([]);\n\n  const fetchData = async () => {\n    const loader = (\n      <Loader key='loader' active inline='centered' size='large'>\n        Searching\n      </Loader>\n    );\n    setMessage(loader);\n    setFound(false);\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '<' && last === '>' ? query.slice(1, -1) : query;\n\n    const response = await fetch(`${api}/manga/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setVolumes(data.volumes ? data.volumes : '?');\n      setChapters(data.chapters ? data.chapters : '?');\n      setStatus(data.status);\n      setPublished(data.published ? data.published.string : '');\n      setRating(data.rating);\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setGenres(data.genres);\n      setAuthors(data.authors);\n      setSerializations(data.serializations);\n    } else {\n      setFound(false);\n      setMessage('Manga not found');\n    }\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      fetchData,\n    };\n  });\n\n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{ marginBottom: '10px' }}>\n          <span className='bold'>{name}</span>\n          {data}\n        </Grid.Row>\n      );\n    }\n\n    return null;\n  };\n\n  const nameConverter = (names: string[]) => {\n    return names.map((n) => n.split(', ').reverse().join(' ')).join(', ');\n  };\n\n  if (active === 'manga') {\n    if (found)\n      return (\n        <Container className='smaller-font'>\n          <Grid columns={2} textAlign='left'>\n            <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n              <Image\n                src={imageUrl}\n                fluid\n                label={{\n                  color: 'blue',\n                  content: score,\n                  icon: 'star',\n                  ribbon: true,\n                }}\n              />\n            </Grid.Column>\n            <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <Header inverted textAlign='left'>\n                  <a href={url} className='link'>\n                    {title}\n                  </a>\n                </Header>\n              </Grid.Row>\n              {textGridRow('English Title: ', titleEnglish)}\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <span className='bold'>Type: </span>\n                {type} | <span className='bold'>Status: </span>\n                {status}\n              </Grid.Row>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <span className='bold'>Volumes: </span>\n                {volumes} | <span className='bold'>Chapters: </span>\n                {chapters}\n              </Grid.Row>\n              {textGridRow('Rating: ', rating)}\n              {textGridRow('Published: ', published)}\n              {textGridRow('Authors: ', nameConverter(authors))}\n              {textGridRow('Serializations: ', serializations.join(', '))}\n              {textGridRow('Genres: ', genres.join(', '))}\n            </Grid.Column>\n          </Grid>\n          <Grid columns={1} textAlign='left'>\n            <Grid.Column>\n              <span className='bold'>Synopsis:</span> {synopsis}\n            </Grid.Column>\n            <Grid.Column>\n              {Object.entries(relations).map((r) => {\n                return textGridRow(`${r[0]}: `, r[1].join(', '));\n              })}\n            </Grid.Column>\n          </Grid>\n        </Container>\n      );\n\n    return <div>{message}</div>;\n  }\n\n  return <div />;\n});\n\nexport default Manga;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader } from 'semantic-ui-react';\n\ninterface LightNovelProps {\n  query: string;\n  active: string | null;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst LightNovel = forwardRef(({ query, active }: LightNovelProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [volumes, setVolumes] = useState<number | string>(0);\n  const [chapters, setChapters] = useState<number | string>(0);\n  const [status, setStatus] = useState<string>('');\n  const [published, setPublished] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [genres, setGenres] = useState<string[]>([]);\n  const [authors, setAuthors] = useState<string[]>([]);\n\n  const fetchData = async () => {\n    const loader = (\n      <Loader key='loader' active inline='centered' size='large'>\n        Searching\n      </Loader>\n    );\n    setMessage(loader);\n    setFound(false);\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '[' && last === ']' ? query.slice(1, -1) : query;\n\n    const response = await fetch(`${api}/ln/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setVolumes(data.volumes ? data.volumes : '?');\n      setChapters(data.chapters ? data.chapters : '?');\n      setStatus(data.status);\n      setPublished(data.published ? data.published.string : '');\n      setRating(data.rating);\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setGenres(data.genres);\n      setAuthors(data.authors);\n    } else {\n      setFound(false);\n      setMessage('Light novel not found');\n    }\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      fetchData,\n    };\n  });\n\n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{ marginBottom: '10px' }}>\n          <span className='bold'>{name}</span>\n          {data}\n        </Grid.Row>\n      );\n    }\n\n    return null;\n  };\n\n  const nameConverter = (names: string[]) => {\n    return names.map((n) => n.split(', ').reverse().join(' ')).join(', ');\n  };\n\n  if (active === 'light novel') {\n    if (found)\n      return (\n        <Container className='smaller-font'>\n          <Grid columns={2} textAlign='left'>\n            <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n              <Image\n                src={imageUrl}\n                fluid\n                label={{\n                  color: 'blue',\n                  content: score,\n                  icon: 'star',\n                  ribbon: true,\n                }}\n              />\n            </Grid.Column>\n            <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <Header inverted textAlign='left'>\n                  <a href={url} className='link'>\n                    {title}\n                  </a>\n                </Header>\n              </Grid.Row>\n              {textGridRow('English Title: ', titleEnglish)}\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <span className='bold'>Type: </span>\n                {type} | <span className='bold'>Status: </span>\n                {status}\n              </Grid.Row>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <span className='bold'>Volumes: </span>\n                {volumes} | <span className='bold'>Chapters: </span>\n                {chapters}\n              </Grid.Row>\n              {textGridRow('Rating: ', rating)}\n              {textGridRow('Published: ', published)}\n              {textGridRow('Authors: ', nameConverter(authors))}\n              {textGridRow('Genres: ', genres.join(', '))}\n            </Grid.Column>\n          </Grid>\n          <Grid columns={1} textAlign='left'>\n            <Grid.Column>\n              <span className='bold'>Synopsis:</span> {synopsis}\n            </Grid.Column>\n            <Grid.Column>\n              {Object.entries(relations).map((r) => {\n                return textGridRow(`${r[0]}: `, r[1].join(', '));\n              })}\n            </Grid.Column>\n          </Grid>\n        </Container>\n      );\n\n    return <div>{message}</div>;\n  }\n\n  return <div />;\n});\n\nexport default LightNovel;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader, Dimmer, Button } from 'semantic-ui-react';\n\ninterface VisualNovelProps {\n  query: string;\n  active: string | null;\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst VisualNovel = forwardRef(({ query, active }: VisualNovelProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n  const [blurred, setBlurred] = useState<boolean>(true);\n\n  const [title, setTitle] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [imageNSFW, setImageNSFW] = useState<boolean>(false);\n  const [released, setReleased] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [tags, setTags] = useState<string[]>([]);\n  const [staff, setStaff] = useState<string[]>([]);\n  const [anime, setAnime] = useState<boolean>(false);\n  const [length, setLength] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n\n  const fetchData = async () => {\n    const loader = (\n      <Loader key='loader' active inline='centered' size='large'>\n        Searching\n      </Loader>\n    );\n    setMessage(loader);\n    setFound(false);\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '|' && last === '|' ? query.slice(1, -1) : query;\n\n    const response = await fetch(`${api}/vn/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setBlurred(true);\n      setTitle(data.title);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setImageNSFW(data.image_nsfw);\n      setDescription(data.description);\n      setTags(data.tags);\n      setStaff(data.staff);\n      setAnime(data.anime);\n      setLength(data.length);\n      setScore(data.score);\n      const releasedDate = data.released ? new Date(data.released) : null;\n      if (releasedDate) {\n        setReleased(\n          releasedDate.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n          })\n        );\n      } else {\n        setReleased('?');\n      }\n    } else {\n      setFound(false);\n      setMessage('Visual novel not found');\n    }\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      fetchData,\n    };\n  });\n\n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{ marginBottom: '10px' }}>\n          <span className='bold'>{name}</span>\n          {data}\n        </Grid.Row>\n      );\n    }\n\n    return null;\n  };\n\n  if (active === 'visual novel') {\n    if (found) {\n      return (\n        <Container className='smaller-font'>\n          <Grid columns={2} textAlign='left'>\n            <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n              {!imageNSFW ? (\n                <Image\n                  src={imageUrl}\n                  fluid\n                  label={{\n                    color: 'blue',\n                    content: score,\n                    icon: 'star',\n                    ribbon: true,\n                  }}\n                />\n              ) : (\n                <Dimmer.Dimmable as={Image} fluid blurring dimmed={blurred}>\n                  <Dimmer active={blurred}>\n                    <Header as='h2' inverted>\n                      NSFW\n                    </Header>\n                    <Button\n                      onClick={() => {\n                        setBlurred(false);\n                      }}\n                    >\n                      View\n                    </Button>\n                  </Dimmer>\n                  <Image\n                    src={imageUrl}\n                    fluid\n                    label={{\n                      color: 'blue',\n                      content: score,\n                      icon: 'star',\n                      ribbon: true,\n                    }}\n                    onClick={() => setBlurred(true)}\n                  />\n                </Dimmer.Dimmable>\n              )}\n            </Grid.Column>\n            <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <Header inverted textAlign='left'>\n                  <a href={url} className='link'>\n                    {title}\n                  </a>\n                </Header>\n              </Grid.Row>\n              {textGridRow('Type: ', 'Visual Novel')}\n              {textGridRow('Released: ', released)}\n              {textGridRow('Length: ', length)}\n              {textGridRow('Anime Adaptation: ', anime ? 'Yes' : 'No')}\n              {textGridRow('Staff: ', staff.join(', '))}\n              {textGridRow('Tags: ', tags.slice(0, 20).join(', '))}\n            </Grid.Column>\n          </Grid>\n          <Grid columns={1} textAlign='left'>\n            {description ? (\n              <Grid.Column>\n                <span className='bold'>Description:</span> {description}\n              </Grid.Column>\n            ) : null}\n          </Grid>\n        </Container>\n      );\n    }\n\n    return <div>{message}</div>;\n  }\n\n  return <div />;\n});\n\nexport default VisualNovel;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Grid, Header, Loader } from 'semantic-ui-react';\n\ninterface DoujinProps {\n  query: string;\n  active: string | null;\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Doujin = forwardRef(({ query, active }: DoujinProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [id, setId] = useState<number>(0);\n  const [title, setTitle] = useState<string>('');\n  const [uploadDate, setUploadDate] = useState<string>('');\n  const [pages, setPages] = useState(0);\n  const [characters, setCharacters] = useState([]);\n  const [parodies, setParodies] = useState([]);\n  const [tags, setTags] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [url, setUrl] = useState('');\n\n  const fetchData = async () => {\n    const loader = (\n      <Loader key='loader' active inline='centered' size='large'>\n        Searching\n      </Loader>\n    );\n    setMessage(loader);\n    setFound(false);\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '(' && last === ')' ? query.slice(1, -1) : query;\n\n    const response = await fetch(`${api}/doujin/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setId(data.id);\n      setTitle(data.title);\n      setPages(data.pages);\n      setCharacters(data.characters);\n      setParodies(data.parodies);\n      setTags(data.tags);\n      setArtists(data.artists);\n      setGroups(data.groups);\n      setLanguages(data.languages);\n      setCategories(data.categories);\n      setUrl(data.url);\n      const upload = data.upload_date ? new Date(data.upload_date) : null;\n      if (upload) {\n        setUploadDate(\n          upload.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })\n        );\n      } else {\n        setUploadDate('?');\n      }\n    } else {\n      setFound(false);\n      setMessage('Doujin not found');\n    }\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      fetchData,\n    };\n  });\n\n  const arrayGridColumn = (name: string, array: string[]) => {\n    if (array && array.length > 0) {\n      return (\n        <Grid.Column>\n          <span className='bold'>{name}</span>\n          {array.join(', ')}\n        </Grid.Column>\n      );\n    }\n\n    return null;\n  };\n\n  if (active === 'doujin') {\n    if (found) {\n      return (\n        <Grid columns={1} textAlign='left'>\n          <Grid.Column>\n            <Header inverted textAlign='left'>\n              <a href={url} className='link'>\n                {id}\n              </a>\n            </Header>\n          </Grid.Column>\n          <Grid.Column>\n            <span className='bold'>Title: </span>\n            {title}\n          </Grid.Column>\n          <Grid.Column>\n            <span className='bold'>Pages: </span>\n            {pages}\n          </Grid.Column>\n          <Grid.Column>\n            <span className='bold'>Upload Date: </span>\n            {uploadDate}\n          </Grid.Column>\n          {arrayGridColumn('Characters: ', characters)}\n          {arrayGridColumn('Parodies: ', parodies)}\n          {arrayGridColumn('Tags: ', tags)}\n          {arrayGridColumn('Artists: ', artists)}\n          {arrayGridColumn('Groups: ', groups)}\n          {arrayGridColumn('Languages: ', languages)}\n          {arrayGridColumn('Categories: ', categories)}\n        </Grid>\n      );\n    }\n\n    return <div>{message}</div>;\n  }\n\n  return <div />;\n});\n\nexport default Doujin;\n","import React from 'react';\n\ninterface ErrorMessageProps {\n  active: string | null;\n  message: string;\n}\n\nconst ErrorMessage = ({ active, message }: ErrorMessageProps): React.ReactElement => {\n  return <div>{active === 'error' ? message : null}</div>;\n};\n\nexport default ErrorMessage;\n","import React, { useState, useRef } from 'react';\nimport { Container, Header } from 'semantic-ui-react';\nimport Status from './components/Status';\nimport Search from './components/Search';\nimport Anime from './components/Anime';\nimport Manga from './components/Manga';\nimport LightNovel from './components/LightNovel';\nimport VisualNovel from './components/VisualNovel';\nimport Doujin from './components/Doujin';\nimport ErrorMessage from './components/ErrorMessage';\nimport './App.css';\n\ninterface fetchDataRef {\n  fetchData: () => Promise<void>;\n}\n\nconst parsePattern = (query: string) => {\n  if (query.length <= 2) {\n    return -1;\n  }\n\n  const first = query.charAt(0);\n  const last = query.slice(-1);\n  if (first === '{' && last === '}') {\n    return 1;\n  }\n  if (first === '<' && last === '>') {\n    return 2;\n  }\n  if (first === '[' && last === ']') {\n    return 3;\n  }\n  if (first === '|' && last === '|') {\n    return 4;\n  }\n  if (first === '(' && last === ')') {\n    return 5;\n  }\n\n  return -1;\n};\n\nfunction App(): React.ReactElement {\n  const [index, setIndex] = useState<number>(0);\n  const [query, setQuery] = useState<string>('');\n  const [active, setActive] = useState<string | null>(null);\n  const [message, setMessage] = useState<string>('');\n\n  const animeRef = useRef<fetchDataRef>(null);\n  const mangaRef = useRef<fetchDataRef>(null);\n  const lightNovelRef = useRef<fetchDataRef>(null);\n  const visualNovelRef = useRef<fetchDataRef>(null);\n  const doujinRef = useRef<fetchDataRef>(null);\n\n  const handleClick = () => {\n    if (!query || !/\\S/.test(query)) {\n      setActive(null);\n      return;\n    }\n    const currentIndex = index > 0 && index <= 5 ? index : parsePattern(query);\n    switch (currentIndex) {\n      case 1:\n        setActive('anime');\n        if (animeRef.current) {\n          animeRef.current.fetchData();\n        }\n        break;\n      case 2:\n        setActive('manga');\n        if (mangaRef.current) {\n          mangaRef.current.fetchData();\n        }\n        break;\n      case 3:\n        setActive('light novel');\n        if (lightNovelRef.current) {\n          lightNovelRef.current.fetchData();\n        }\n        break;\n      case 4:\n        setActive('visual novel');\n        if (visualNovelRef.current) {\n          visualNovelRef.current.fetchData();\n        }\n        break;\n      case 5:\n        setActive('doujin');\n        if (doujinRef.current) {\n          doujinRef.current.fetchData();\n        }\n        break;\n      default:\n        setActive('error');\n        setMessage('Invalid search pattern');\n        break;\n    }\n  };\n\n  return (\n    <div className='App'>\n      <Status />\n      <Header size='huge' inverted style={{ marginTop: '30px', marginBottom: '20px' }}>\n        Sauce Searcher\n      </Header>\n      <Search index={index} setIndex={setIndex} setQuery={setQuery} handleClick={handleClick} />\n      <Container\n        style={{\n          margin: '30px',\n          padding: '30px',\n          border: active ? '2px solid white' : 'none',\n          lineHeight: 'normal',\n        }}\n      >\n        <Anime ref={animeRef} query={query} active={active} />\n        <Manga ref={mangaRef} query={query} active={active} />\n        <LightNovel ref={lightNovelRef} query={query} active={active} />\n        <VisualNovel ref={visualNovelRef} query={query} active={active} />\n        <Doujin ref={doujinRef} query={query} active={active} />\n        <ErrorMessage active={active} message={message} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}