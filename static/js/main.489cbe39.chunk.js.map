{"version":3,"sources":["components/Status.tsx","components/Title.tsx","components/SearchLoader.tsx","components/BlurredImage.tsx","components/grids/TextGridRow.tsx","components/grids/TextGridColumn.tsx","components/grids/HeaderGridRow.tsx","components/grids/HeaderGridColumn.tsx","components/grids/RelationsGridColumn.tsx","components/grids/ListGridColumn.tsx","components/Anime.tsx","components/Manga.tsx","components/LightNovel.tsx","components/VisualNovel.tsx","components/Doujin.tsx","components/ErrorMessage.tsx","components/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StatusColor","StatusText","Status","useState","Starting","color","setColor","text","setText","checkServer","a","fetch","process","ok","Up","Down","useEffect","Segment","inverted","style","position","top","right","Menu","Item","href","target","Icon","name","size","Popup","content","trigger","Title","Header","marginTop","marginBottom","SearchLoader","Loader","active","inline","ImageGridColumn","imageUrl","score","imageNSFW","blurred","setBlurred","Dimmer","Dimmable","as","Image","fluid","blurring","dimmed","Button","onClick","src","label","icon","ribbon","TextGridRow","Array","isArray","every","x","Grid","Row","map","value","index","className","reduce","previous","current","toString","TextGridColumn","Column","HeaderGridRow","title","url","textAlign","HeaderGridColumn","RelationsGridColumn","relations","Object","entries","r","join","ListGridColumn","data","length","i","Anime","query","found","setFound","message","setMessage","setTitle","titleEnglish","setTitleEnglish","setUrl","setImageUrl","type","setType","source","setSource","episodes","setEpisodes","status","setStatus","premiered","setPremiered","aired","setAired","duration","setDuration","rating","setRating","setScore","synopsis","setSynopsis","setRelations","studios","setStudios","genres","setGenres","openings","setOpenings","endings","setEndings","fetchData","search","response","json","title_english","image","string","test","Container","columns","largeScreen","tablet","mobile","BlurredImage","Manga","volumes","setVolumes","chapters","setChapters","published","setPublished","authors","setAuthors","serializations","setSerializations","names","n","split","reverse","LightNovel","VisualNovel","setImageNSFW","released","setReleased","description","setDescription","tags","setTags","staff","setStaff","anime","setAnime","setLength","image_nsfw","releasedDate","Date","toLocaleDateString","year","month","day","slice","Doujin","id","setId","uploadDate","setUploadDate","pages","setPages","characters","setCharacters","parodies","setParodies","artists","setArtists","groups","setGroups","languages","setLanguages","categories","setCategories","upload","upload_date","ErrorMessage","panes","menuItem","placeholder","Search","setPlaceholder","setIndex","setQuery","setActive","handleClick","currentIndex","first","charAt","last","parseIndex","currentQuery","parseQuery","width","overflow","margin","padding","Tab","menu","attached","tabular","renderActiveOnly","onTabChange","event","activeIndex","Input","action","onChange","onKeyDown","key","border","lineHeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.489cbe39.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Segment, Icon, Menu, Popup, SemanticCOLORS } from 'semantic-ui-react';\n\nenum StatusColor {\n  Starting = 'yellow',\n  Up = 'green',\n  Down = 'red',\n}\n\nenum StatusText {\n  Starting = 'Serving is starting',\n  Up = 'Server is up',\n  Down = 'Server is down',\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Status = (): React.ReactElement => {\n  const [color, setColor] = useState<SemanticCOLORS>(StatusColor.Starting);\n  const [text, setText] = useState<string>(StatusText.Starting);\n\n  const checkServer = async () => {\n    try {\n      const response = await fetch(`${api}`);\n      if (response.ok) {\n        setColor(StatusColor.Up);\n        setText(StatusText.Up);\n      } else {\n        setColor(StatusColor.Down);\n        setText(StatusText.Down);\n      }\n    } catch {\n      setColor(StatusColor.Down);\n      setText(StatusText.Down);\n    }\n  };\n\n  useEffect(() => {\n    checkServer();\n  }, []);\n\n  return (\n    <Segment inverted style={{ position: 'absolute', top: 0, right: 0 }}>\n      <Menu.Item href='https://github.com/f4str/sauce-searcher' target='_blank'>\n        <Icon name='github' inverted size='large' />\n      </Menu.Item>\n\n      <Popup content={text} inverted trigger={<Icon name='circle' size='large' color={color} />} />\n    </Segment>\n  );\n};\n\nexport default Status;\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nconst Title = (): React.ReactElement => {\n  return (\n    <Header size='huge' inverted style={{ marginTop: '30px', marginBottom: '20px' }}>\n      Sauce Searcher\n    </Header>\n  );\n};\n\nexport default Title;\n","import React from 'react';\nimport { Loader } from 'semantic-ui-react';\n\nconst SearchLoader = (): React.ReactElement => {\n  return (\n    <Loader key='loader' active inline='centered' size='large'>\n      Searching\n    </Loader>\n  );\n};\n\nexport default SearchLoader;\n","import React, { useState } from 'react';\nimport { Button, Dimmer, Header, Image } from 'semantic-ui-react';\n\ninterface ImageGridColumnProps {\n  imageUrl: string;\n  score: string | number;\n  imageNSFW: boolean;\n}\n\nconst ImageGridColumn = ({\n  imageUrl,\n  score,\n  imageNSFW,\n}: ImageGridColumnProps): React.ReactElement => {\n  const [blurred, setBlurred] = useState<boolean>(true);\n\n  if (imageNSFW) {\n    return (\n      <Dimmer.Dimmable as={Image} fluid blurring dimmed={blurred}>\n        <Dimmer active={blurred}>\n          <Header as='h2' inverted>\n            NSFW\n          </Header>\n          <Button\n            onClick={() => {\n              setBlurred(false);\n            }}\n          >\n            View\n          </Button>\n        </Dimmer>\n        <Image\n          src={imageUrl}\n          fluid\n          label={{\n            color: 'blue',\n            content: score,\n            icon: 'star',\n            ribbon: true,\n          }}\n          onClick={() => setBlurred(true)}\n        />\n      </Dimmer.Dimmable>\n    );\n  }\n  return (\n    <Image\n      src={imageUrl}\n      fluid\n      label={{\n        color: 'blue',\n        content: score,\n        icon: 'star',\n        ribbon: true,\n      }}\n    />\n  );\n};\n\nexport default ImageGridColumn;\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\n\ninterface TextGridRowProps {\n  label: string | number | (string | number)[];\n  text: string | number | (string | number)[];\n}\n\nconst TextGridRow = ({ label, text }: TextGridRowProps): React.ReactElement => {\n  if (Array.isArray(label) && Array.isArray(text)) {\n    if (label.every((x) => x && x !== '')) {\n      return (\n        <Grid.Row key={label.toString()} style={{ marginBottom: '10px' }}>\n          {label\n            .map<React.ReactNode>((value, index) => (\n              <>\n                <span className='bold'>{value}: </span>\n                {text[index]}\n              </>\n            ))\n            .reduce((previous, current) => [previous, ' | ', current])}\n        </Grid.Row>\n      );\n    }\n  } else if (label && label !== '') {\n    return (\n      <Grid.Row key={label.toString()} style={{ marginBottom: '10px' }}>\n        <span className='bold'>{label}: </span>\n        {text}\n      </Grid.Row>\n    );\n  }\n  return <div />;\n};\n\nexport default TextGridRow;\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\n\ninterface TextGridColumnProps {\n  label: string;\n  text: string | number;\n}\n\nconst TextGridColumn = ({ label, text }: TextGridColumnProps): React.ReactElement => {\n  if (text && text !== '') {\n    return (\n      <Grid.Column>\n        <span className='bold'>{label}: </span>\n        {text}\n      </Grid.Column>\n    );\n  }\n  return <div />;\n};\n\nexport default TextGridColumn;\n","import React from 'react';\nimport { Grid, Header } from 'semantic-ui-react';\n\ninterface HeaderGridRowProps {\n  title: string;\n  url: string;\n}\n\nconst HeaderGridRow = ({ title, url }: HeaderGridRowProps): React.ReactElement => {\n  if (title && title !== '') {\n    return (\n      <Grid.Row style={{ marginBottom: '10px' }}>\n        <Header inverted textAlign='left'>\n          <a href={url} className='link'>\n            {title}\n          </a>\n        </Header>\n      </Grid.Row>\n    );\n  }\n  return <div />;\n};\n\nexport default HeaderGridRow;\n","import React from 'react';\nimport { Grid, Header } from 'semantic-ui-react';\n\ninterface HeaderGridColumnProps {\n  title: string | number;\n  url: string;\n}\n\nconst HeaderGridColumn = ({ title, url }: HeaderGridColumnProps): React.ReactElement => {\n  if (title && title !== '') {\n    return (\n      <Grid.Column>\n        <Header inverted textAlign='left'>\n          <a href={url} className='link'>\n            {title}\n          </a>\n        </Header>\n      </Grid.Column>\n    );\n  }\n  return <div />;\n};\n\nexport default HeaderGridColumn;\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport { TextGridRow } from '.';\n\ninterface Relations {\n  [key: string]: string[];\n}\n\ninterface RelationsGridColumnProps {\n  relations: Relations;\n}\n\nconst RelationsGridColumn = ({ relations }: RelationsGridColumnProps): React.ReactElement => {\n  return (\n    <Grid.Column>\n      {Object.entries(relations).map((r) => {\n        return <TextGridRow label={`${r[0]}`} text={r[1].join(', ')} />;\n      })}\n    </Grid.Column>\n  );\n};\n\nexport default RelationsGridColumn;\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\n\ninterface ListGridColumnProps {\n  label: string;\n  data: (string | number)[];\n}\n\nconst ListGridColumn = ({ label, data }: ListGridColumnProps): React.ReactElement => {\n  return (\n    <Grid.Column>\n      <Grid.Row style={{ marginBottom: '5px' }}>\n        <span className='bold'>{label}</span>\n      </Grid.Row>\n      {data && data.length > 0\n        ? data.map((x, i) => (\n            <Grid.Row key={`${label}${i + 1}`} style={{ marginBottom: '5px' }}>\n              {i + 1}. {x}\n            </Grid.Row>\n          ))\n        : 'None'}\n    </Grid.Column>\n  );\n};\n\nexport default ListGridColumn;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchLoader from './SearchLoader';\nimport BlurredImage from './BlurredImage';\nimport {\n  TextGridRow,\n  TextGridColumn,\n  HeaderGridRow,\n  RelationsGridColumn,\n  ListGridColumn,\n} from './grids';\n\ninterface AnimeProps {\n  query: string;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Anime = ({ query }: AnimeProps): React.ReactElement => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [source, setSource] = useState<string>('');\n  const [episodes, setEpisodes] = useState<number>(0);\n  const [status, setStatus] = useState<string>('');\n  const [premiered, setPremiered] = useState<string>('');\n  const [aired, setAired] = useState<string>('');\n  const [duration, setDuration] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [studios, setStudios] = useState<string[]>([]);\n  const [genres, setGenres] = useState<string[]>([]);\n  const [openings, setOpenings] = useState<string[]>([]);\n  const [endings, setEndings] = useState<string[]>([]);\n\n  const fetchData = async (search: string) => {\n    setMessage(<SearchLoader />);\n    setFound(false);\n\n    const response = await fetch(`${api}/anime/${search}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setSource(data.source);\n      setEpisodes(data.episodes ? data.episodes : '?');\n      setStatus(data.status);\n      setPremiered(data.premiered);\n      setAired(data.aired ? data.aired.string : '?');\n      setDuration(data.duration);\n      setRating(data.rating);\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setStudios(data.studios);\n      setGenres(data.genres);\n      setOpenings(data.openings);\n      setEndings(data.endings);\n    } else {\n      setFound(false);\n      setMessage('Anime not found');\n    }\n  };\n\n  useEffect(() => {\n    if (!query || !/\\S/.test(query)) {\n      setFound(false);\n      setMessage('Invalid query');\n    } else {\n      fetchData(query);\n    }\n  }, [query]);\n\n  if (found)\n    return (\n      <Container className='smaller-font'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n            <BlurredImage imageUrl={imageUrl} score={score} imageNSFW={false} />\n          </Grid.Column>\n          <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n            <HeaderGridRow title={title} url={url} />\n            <TextGridRow label='English Title' text={titleEnglish} />\n            <TextGridRow label={['Type', 'Episodes']} text={[type, episodes]} />\n            <TextGridRow label='Status' text={status} />\n            <TextGridRow label='Rating' text={rating} />\n            <TextGridRow label='Studios' text={studios.join(', ')} />\n            <TextGridRow label='Source' text={source} />\n            <TextGridRow label='Duration' text={duration} />\n            <TextGridRow label='Season' text={premiered} />\n            <TextGridRow label='Aired' text={aired} />\n            <TextGridRow label='Genres' text={genres.join(', ')} />\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <TextGridColumn label='Synopsis' text={synopsis} />\n          <RelationsGridColumn relations={relations} />\n          <ListGridColumn label='Openings' data={openings} />\n          <ListGridColumn label='Endings' data={endings} />\n        </Grid>\n      </Container>\n    );\n\n  return <div>{message}</div>;\n};\n\nexport default Anime;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchLoader from './SearchLoader';\nimport BlurredImage from './BlurredImage';\nimport { TextGridRow, TextGridColumn, HeaderGridRow, RelationsGridColumn } from './grids';\n\ninterface MangaProps {\n  query: string;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Manga = ({ query }: MangaProps): React.ReactElement => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [volumes, setVolumes] = useState<number | string>(0);\n  const [chapters, setChapters] = useState<number | string>(0);\n  const [status, setStatus] = useState<string>('');\n  const [published, setPublished] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [genres, setGenres] = useState<string[]>([]);\n  const [authors, setAuthors] = useState<string[]>([]);\n  const [serializations, setSerializations] = useState<string[]>([]);\n\n  const fetchData = async (search: string) => {\n    setMessage(<SearchLoader />);\n    setFound(false);\n\n    const response = await fetch(`${api}/manga/${search}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setVolumes(data.volumes ? data.volumes : '?');\n      setChapters(data.chapters ? data.chapters : '?');\n      setStatus(data.status);\n      setPublished(data.published ? data.published.string : '');\n      setRating(data.rating);\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setGenres(data.genres);\n      setAuthors(data.authors);\n      setSerializations(data.serializations);\n    } else {\n      setFound(false);\n      setMessage('Manga not found');\n    }\n  };\n\n  useEffect(() => {\n    if (!query || !/\\S/.test(query)) {\n      setFound(false);\n      setMessage('Invalid query');\n    } else {\n      fetchData(query);\n    }\n  }, [query]);\n\n  const nameConverter = (names: string[]): string => {\n    return names.map((n) => n.split(', ').reverse().join(' ')).join(', ');\n  };\n\n  if (found)\n    return (\n      <Container className='smaller-font'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n            <BlurredImage imageUrl={imageUrl} score={score} imageNSFW={false} />\n          </Grid.Column>\n          <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n            <HeaderGridRow title={title} url={url} />\n            <TextGridRow label='English Title' text={titleEnglish} />\n            <TextGridRow label={['Type', 'Status']} text={[type, status]} />\n            <TextGridRow label={['Volumes', 'Chapters']} text={[volumes, chapters]} />\n            <TextGridRow label='Rating' text={rating} />\n            <TextGridRow label='Published' text={published} />\n            <TextGridRow label='Authors' text={nameConverter(authors)} />\n            <TextGridRow label='Serializations' text={serializations.join(', ')} />\n            <TextGridRow label='Genres' text={genres.join(', ')} />\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <TextGridColumn label='Synopsis' text={synopsis} />\n          <RelationsGridColumn relations={relations} />\n        </Grid>\n      </Container>\n    );\n\n  return <div>{message}</div>;\n};\n\nexport default Manga;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchLoader from './SearchLoader';\nimport BlurredImage from './BlurredImage';\nimport { TextGridRow, TextGridColumn, HeaderGridRow, RelationsGridColumn } from './grids';\n\ninterface LightNovelProps {\n  query: string;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst LightNovel = ({ query }: LightNovelProps): React.ReactElement => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [volumes, setVolumes] = useState<number | string>(0);\n  const [chapters, setChapters] = useState<number | string>(0);\n  const [status, setStatus] = useState<string>('');\n  const [published, setPublished] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [genres, setGenres] = useState<string[]>([]);\n  const [authors, setAuthors] = useState<string[]>([]);\n\n  const fetchData = async (search: string) => {\n    setMessage(<SearchLoader />);\n    setFound(false);\n\n    const response = await fetch(`${api}/ln/${search}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setVolumes(data.volumes ? data.volumes : '?');\n      setChapters(data.chapters ? data.chapters : '?');\n      setStatus(data.status);\n      setPublished(data.published ? data.published.string : '');\n      setRating(data.rating);\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setGenres(data.genres);\n      setAuthors(data.authors);\n    } else {\n      setFound(false);\n      setMessage('Light novel not found');\n    }\n  };\n\n  useEffect(() => {\n    if (!query || !/\\S/.test(query)) {\n      setFound(false);\n      setMessage('Invalid query');\n    } else {\n      fetchData(query);\n    }\n  }, [query]);\n\n  const nameConverter = (names: string[]): string => {\n    return names.map((n) => n.split(', ').reverse().join(' ')).join(', ');\n  };\n\n  if (found)\n    return (\n      <Container className='smaller-font'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n            <BlurredImage imageUrl={imageUrl} score={score} imageNSFW={false} />\n          </Grid.Column>\n          <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n            <HeaderGridRow title={title} url={url} />\n            <TextGridRow label='English Title' text={titleEnglish} />\n            <TextGridRow label={['Type', 'Status']} text={[type, status]} />\n            <TextGridRow label={['Volumes', 'Chapters']} text={[volumes, chapters]} />\n            <TextGridRow label='Rating' text={rating} />\n            <TextGridRow label='Published' text={published} />\n            <TextGridRow label='Authors' text={nameConverter(authors)} />\n            <TextGridRow label='Genres' text={genres.join(', ')} />\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <TextGridColumn label='Synopsis' text={synopsis} />\n          <RelationsGridColumn relations={relations} />\n        </Grid>\n      </Container>\n    );\n\n  return <div>{message}</div>;\n};\n\nexport default LightNovel;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchLoader from './SearchLoader';\nimport BlurredImage from './BlurredImage';\nimport { TextGridRow, HeaderGridRow, TextGridColumn } from './grids';\n\ninterface VisualNovelProps {\n  query: string;\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst VisualNovel = ({ query }: VisualNovelProps): React.ReactElement => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [imageNSFW, setImageNSFW] = useState<boolean>(false);\n  const [released, setReleased] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [tags, setTags] = useState<string[]>([]);\n  const [staff, setStaff] = useState<string[]>([]);\n  const [anime, setAnime] = useState<boolean>(false);\n  const [length, setLength] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n\n  const fetchData = async (search: string) => {\n    setMessage(<SearchLoader />);\n    setFound(false);\n\n    const response = await fetch(`${api}/vn/${search}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setImageNSFW(data.image_nsfw);\n      setDescription(data.description);\n      setTags(data.tags);\n      setStaff(data.staff);\n      setAnime(data.anime);\n      setLength(data.length);\n      setScore(data.score);\n      const releasedDate = data.released ? new Date(data.released) : null;\n      if (releasedDate) {\n        setReleased(\n          releasedDate.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n          })\n        );\n      } else {\n        setReleased('?');\n      }\n    } else {\n      setFound(false);\n      setMessage('Visual novel not found');\n    }\n  };\n\n  useEffect(() => {\n    if (!query || !/\\S/.test(query)) {\n      setFound(false);\n      setMessage('Invalid query');\n    } else {\n      fetchData(query);\n    }\n  }, [query]);\n\n  if (found) {\n    return (\n      <Container className='smaller-font'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n            <BlurredImage imageUrl={imageUrl} score={score} imageNSFW={imageNSFW} />\n          </Grid.Column>\n          <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n            <HeaderGridRow title={title} url={url} />\n            <TextGridRow label='Type' text='Visual Novel' />\n            <TextGridRow label='Released' text={released} />\n            <TextGridRow label='Length' text={length} />\n            <TextGridRow label='Anime Adaptation' text={anime ? 'Yes' : 'No'} />\n            <TextGridRow label='Staff' text={staff.join(', ')} />\n            <TextGridRow label='Tags' text={tags.slice(0, 20).join(', ')} />\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <TextGridColumn label='Description' text={description} />\n        </Grid>\n      </Container>\n    );\n  }\n\n  return <div>{message}</div>;\n};\n\nexport default VisualNovel;\n","import React, { useState, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport SearchLoader from './SearchLoader';\nimport { TextGridColumn, HeaderGridColumn } from './grids';\n\ninterface DoujinProps {\n  query: string;\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Doujin = ({ query }: DoujinProps): React.ReactElement => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [id, setId] = useState<number>(0);\n  const [title, setTitle] = useState<string>('');\n  const [uploadDate, setUploadDate] = useState<string>('');\n  const [pages, setPages] = useState(0);\n  const [characters, setCharacters] = useState([]);\n  const [parodies, setParodies] = useState([]);\n  const [tags, setTags] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [url, setUrl] = useState('');\n\n  const fetchData = async (search: string) => {\n    setMessage(<SearchLoader />);\n    setFound(false);\n\n    const response = await fetch(`${api}/doujin/${search}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFound(true);\n      setId(data.id);\n      setTitle(data.title);\n      setPages(data.pages);\n      setCharacters(data.characters);\n      setParodies(data.parodies);\n      setTags(data.tags);\n      setArtists(data.artists);\n      setGroups(data.groups);\n      setLanguages(data.languages);\n      setCategories(data.categories);\n      setUrl(data.url);\n      const upload = data.upload_date ? new Date(data.upload_date) : null;\n      if (upload) {\n        setUploadDate(\n          upload.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })\n        );\n      } else {\n        setUploadDate('?');\n      }\n    } else {\n      setFound(false);\n      setMessage('Doujin not found');\n    }\n  };\n\n  useEffect(() => {\n    if (!query || !/\\S/.test(query)) {\n      setFound(false);\n      setMessage('Invalid query');\n    } else {\n      fetchData(query);\n    }\n  }, [query]);\n\n  if (found) {\n    return (\n      <Grid columns={1} textAlign='left'>\n        <HeaderGridColumn title={id} url={url} />\n        <TextGridColumn label='Title' text={title} />\n        <TextGridColumn label='Pages' text={pages} />\n        <TextGridColumn label='Upload Date' text={uploadDate} />\n        <TextGridColumn label='Characters' text={characters.join(', ')} />\n        <TextGridColumn label='Parodies' text={parodies.join(', ')} />\n        <TextGridColumn label='Tags' text={tags.join(', ')} />\n        <TextGridColumn label='Artists' text={artists.join(', ')} />\n        <TextGridColumn label='Groups' text={groups.join(', ')} />\n        <TextGridColumn label='Languages' text={languages.join(', ')} />\n        <TextGridColumn label='Categories' text={categories.join(', ')} />\n      </Grid>\n    );\n  }\n\n  return <div>{message}</div>;\n};\n\nexport default Doujin;\n","import React from 'react';\n\ninterface ErrorMessageProps {\n  message: string;\n}\n\nconst ErrorMessage = ({ message }: ErrorMessageProps): React.ReactElement => {\n  return <div>{message}</div>;\n};\n\nexport default ErrorMessage;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Input, Segment, Tab, TabProps } from 'semantic-ui-react';\nimport Anime from './Anime';\nimport Manga from './Manga';\nimport LightNovel from './LightNovel';\nimport VisualNovel from './VisualNovel';\nimport Doujin from './Doujin';\nimport ErrorMessage from './ErrorMessage';\n\ninterface Pane {\n  menuItem: string;\n  placeholder: string;\n}\n\nconst panes: Pane[] = [\n  { menuItem: 'Auto', placeholder: '{anime}, <manga>, [light novel], |visual novel|, (doujin)' },\n  { menuItem: 'Anime', placeholder: 'Search by anime name' },\n  { menuItem: 'Manga', placeholder: 'Search by manga name' },\n  { menuItem: 'Light Novel', placeholder: 'Search by light novel name' },\n  { menuItem: 'Visual Novel', placeholder: 'Search by visual novel name' },\n  { menuItem: 'Doujin', placeholder: 'Search by doujin digits' },\n];\n\nconst Search = (): React.ReactElement => {\n  const [placeholder, setPlaceholder] = useState<string>('Search');\n  const [index, setIndex] = useState<number>(0);\n  const [query, setQuery] = useState<string>('');\n  const [active, setActive] = useState<string | null | React.ReactElement>(null);\n\n  useEffect(() => {\n    setPlaceholder(panes[index].placeholder);\n  }, [index]);\n\n  const handleTabChange = (event: React.MouseEvent<HTMLDivElement>, data: TabProps) => {\n    setIndex(data.activeIndex as number);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const parseIndex = (): number => {\n    if (index > 0) {\n      return index;\n    }\n    if (query.length <= 2) {\n      return -1;\n    }\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    if (first === '{' && last === '}') {\n      return 1;\n    }\n    if (first === '<' && last === '>') {\n      return 2;\n    }\n    if (first === '[' && last === ']') {\n      return 3;\n    }\n    if (first === '|' && last === '|') {\n      return 4;\n    }\n    if (first === '(' && last === ')') {\n      return 5;\n    }\n\n    return -1;\n  };\n\n  const parseQuery = (): string => {\n    if (query.length <= 2) {\n      return query;\n    }\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    if (\n      (first === '{' && last === '}') ||\n      (first === '<' && last === '>') ||\n      (first === '[' && last === ']') ||\n      (first === '|' && last === '|') ||\n      (first === '(' && last === ')')\n    ) {\n      return query.slice(1, -1);\n    }\n\n    return query;\n  };\n\n  const handleClick = () => {\n    if (!query || !/\\S/.test(query)) {\n      setActive(null);\n      return;\n    }\n    const currentIndex = parseIndex();\n    const currentQuery = parseQuery();\n\n    switch (currentIndex) {\n      case 1:\n        setActive(<Anime query={currentQuery} />);\n        break;\n      case 2:\n        setActive(<Manga query={currentQuery} />);\n        break;\n      case 3:\n        setActive(<LightNovel query={currentQuery} />);\n        break;\n      case 4:\n        setActive(<VisualNovel query={currentQuery} />);\n        break;\n      case 5:\n        setActive(<Doujin query={currentQuery} />);\n        break;\n      default:\n        setActive(<ErrorMessage message='Invalid search pattern' />);\n        break;\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      handleClick();\n    }\n  };\n\n  return (\n    <div>\n      <Container style={{ width: '50%' }}>\n        <Segment inverted style={{ overflow: 'auto', margin: 'auto', padding: '1px' }}>\n          <Tab\n            panes={panes}\n            menu={{\n              attached: true,\n              tabular: true,\n              inverted: true,\n            }}\n            renderActiveOnly\n            onTabChange={handleTabChange}\n          />\n        </Segment>\n        <Input\n          action={{\n            icon: 'search',\n            onClick: () => {\n              handleClick();\n            },\n          }}\n          style={{ width: '100%' }}\n          size='small'\n          placeholder={placeholder}\n          inverted\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n        />\n      </Container>\n      <Container\n        style={{\n          margin: '30px',\n          padding: '30px',\n          border: active ? '2px solid white' : 'none',\n          lineHeight: 'normal',\n        }}\n      >\n        {active}\n      </Container>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport Status from './components/Status';\nimport Title from './components/Title';\nimport Search from './components/Search';\nimport './App.css';\n\nfunction App(): React.ReactElement {\n  return (\n    <div className='App'>\n      <Status />\n      <Title />\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}