{"version":3,"sources":["components/Status.tsx","components/Title.tsx","components/SearchLoader.tsx","components/BlurredImage.tsx","components/grids/TextGridRow.tsx","components/grids/TextGridColumn.tsx","components/grids/HeaderGridRow.tsx","components/grids/HeaderGridColumn.tsx","components/grids/RelationsGridColumn.tsx","components/grids/ListGridColumn.tsx","components/Anime.tsx","components/Manga.tsx","components/LightNovel.tsx","components/VisualNovel.tsx","components/Doujin.tsx","components/ErrorMessage.tsx","components/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StatusColor","StatusText","Status","useState","Starting","color","setColor","text","setText","checkServer","a","fetch","process","ok","Up","Down","useEffect","className","Segment","inverted","Menu","Item","href","target","Icon","name","size","Popup","content","trigger","Title","Header","SearchLoader","Loader","active","inline","ImageGridColumn","imageUrl","score","imageNSFW","blurred","setBlurred","Dimmer","Dimmable","as","Image","fluid","blurring","dimmed","Button","onClick","src","label","icon","ribbon","TextGridRow","Array","isArray","every","x","Grid","Row","map","value","index","reduce","previous","current","toString","TextGridColumn","Column","HeaderGridRow","title","url","textAlign","HeaderGridColumn","RelationsGridColumn","relations","Object","entries","r","join","ListGridColumn","data","length","i","Anime","query","found","setFound","message","setMessage","setTitle","titleEnglish","setTitleEnglish","setUrl","setImageUrl","type","setType","source","setSource","episodes","setEpisodes","status","setStatus","premiered","setPremiered","aired","setAired","duration","setDuration","rating","setRating","setScore","synopsis","setSynopsis","setRelations","studios","setStudios","genres","setGenres","openings","setOpenings","endings","setEndings","fetchData","search","response","json","title_english","image","string","test","Container","columns","computer","widescreen","largeScreen","tablet","mobile","BlurredImage","Manga","volumes","setVolumes","chapters","setChapters","published","setPublished","authors","setAuthors","serializations","setSerializations","names","n","split","reverse","LightNovel","VisualNovel","setImageNSFW","released","setReleased","description","setDescription","tags","setTags","staff","setStaff","anime","setAnime","setLength","image_nsfw","releasedDate","Date","toLocaleDateString","year","month","day","slice","Doujin","id","setId","uploadDate","setUploadDate","pages","setPages","characters","setCharacters","parodies","setParodies","artists","setArtists","groups","setGroups","languages","setLanguages","categories","setCategories","upload","upload_date","ErrorMessage","panes","menuItem","placeholder","styles","container","width","tab","overflow","margin","padding","input","Search","setPlaceholder","setIndex","setQuery","setActive","handleClick","currentIndex","first","charAt","last","parseIndex","currentQuery","parseQuery","style","Tab","menu","attached","tabular","renderActiveOnly","onTabChange","event","activeIndex","Input","onKeyDown","key","onChange","action","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d4a5b73.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Segment, Icon, Menu, Popup, SemanticCOLORS } from 'semantic-ui-react';\n\nenum StatusColor {\n  Starting = 'yellow',\n  Up = 'green',\n  Down = 'red',\n}\n\nenum StatusText {\n  Starting = 'Serving is starting',\n  Up = 'Server is up',\n  Down = 'Server is down',\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Status = (): React.ReactElement => {\n  const [color, setColor] = useState<SemanticCOLORS>(StatusColor.Starting);\n  const [text, setText] = useState<string>(StatusText.Starting);\n\n  const checkServer = async () => {\n    try {\n      const response = await fetch(`${api}`);\n      if (response.ok) {\n        setColor(StatusColor.Up);\n        setText(StatusText.Up);\n      } else {\n        setColor(StatusColor.Down);\n        setText(StatusText.Down);\n      }\n    } catch {\n      setColor(StatusColor.Down);\n      setText(StatusText.Down);\n    }\n  };\n\n  useEffect(() => {\n    checkServer();\n  }, []);\n\n  return (\n    <div className='Status'>\n      <Segment inverted>\n        <Menu.Item href='https://github.com/f4str/sauce-searcher' target='_blank'>\n          <Icon name='github' inverted size='large' />\n        </Menu.Item>\n\n        <Popup\n          content={text}\n          inverted\n          trigger={<Icon name='circle' size='large' color={color} />}\n        />\n      </Segment>\n    </div>\n  );\n};\n\nexport default Status;\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nconst Title = (): React.ReactElement => {\n  return (\n    <div className='Title'>\n      <Header size='huge' inverted>\n        Sauce Searcher\n      </Header>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from 'react';\nimport { Loader } from 'semantic-ui-react';\n\nconst SearchLoader = (): React.ReactElement => {\n  return (\n    <div>\n      <Loader key='loader' active inline='centered' size='large'>\n        Searching\n      </Loader>\n    </div>\n  );\n};\n\nexport default SearchLoader;\n","import React, { useState } from 'react';\nimport { Button, Dimmer, Header, Image } from 'semantic-ui-react';\n\ninterface ImageGridColumnProps {\n  imageUrl: string;\n  score: string | number;\n  imageNSFW: boolean;\n}\n\nconst ImageGridColumn = ({\n  imageUrl,\n  score,\n  imageNSFW,\n}: ImageGridColumnProps): React.ReactElement => {\n  const [blurred, setBlurred] = useState<boolean>(true);\n\n  if (imageNSFW) {\n    return (\n      <Dimmer.Dimmable as={Image} fluid blurring dimmed={blurred} className='image'>\n        <Dimmer active={blurred}>\n          <Header as='h2' inverted>\n            NSFW\n          </Header>\n          <Button\n            onClick={() => {\n              setBlurred(false);\n            }}\n          >\n            View\n          </Button>\n        </Dimmer>\n        <Image\n          src={imageUrl}\n          fluid\n          label={{\n            color: 'blue',\n            content: score,\n            icon: 'star',\n            ribbon: true,\n          }}\n          onClick={() => setBlurred(true)}\n        />\n      </Dimmer.Dimmable>\n    );\n  }\n  return (\n    <Image\n      src={imageUrl}\n      className='border'\n      fluid\n      label={{\n        color: 'blue',\n        content: score,\n        icon: 'star',\n        ribbon: true,\n      }}\n    />\n  );\n};\n\nexport default ImageGridColumn;\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\n\ninterface TextGridRowProps {\n  label: string | number | (string | number)[];\n  text: string | number | (string | number)[];\n}\n\nconst TextGridRow = ({ label, text }: TextGridRowProps): React.ReactElement => {\n  if (Array.isArray(label) && Array.isArray(text)) {\n    if (label.every((x) => x && x !== '')) {\n      return (\n        <Grid.Row key={label.toString()} className='grid-row'>\n          {label\n            .map<React.ReactNode>((value, index) => (\n              <>\n                <span className='bold'>{value}: </span>\n                {text[index]}\n              </>\n            ))\n            .reduce((previous, current) => [previous, ' | ', current])}\n        </Grid.Row>\n      );\n    }\n  } else if (label && label !== '') {\n    return (\n      <Grid.Row key={label.toString()} className='grid-row'>\n        <span className='bold'>{label}: </span>\n        {text}\n      </Grid.Row>\n    );\n  }\n  return <div />;\n};\n\nexport default TextGridRow;\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\n\ninterface TextGridColumnProps {\n  label: string;\n  text: string | number;\n}\n\nconst TextGridColumn = ({ label, text }: TextGridColumnProps): React.ReactElement => {\n  if (text && text !== '') {\n    return (\n      <Grid.Column>\n        <span className='bold'>{label}: </span>\n        {text}\n      </Grid.Column>\n    );\n  }\n  return <div />;\n};\n\nexport default TextGridColumn;\n","import React from 'react';\nimport { Grid, Header } from 'semantic-ui-react';\n\ninterface HeaderGridRowProps {\n  title: string;\n  url: string;\n}\n\nconst HeaderGridRow = ({ title, url }: HeaderGridRowProps): React.ReactElement => {\n  if (title && title !== '') {\n    return (\n      <Grid.Row className='grid-row'>\n        <Header inverted textAlign='left'>\n          <a href={url} className='link'>\n            {title}\n          </a>\n        </Header>\n      </Grid.Row>\n    );\n  }\n  return <div />;\n};\n\nexport default HeaderGridRow;\n","import React from 'react';\nimport { Grid, Header } from 'semantic-ui-react';\n\ninterface HeaderGridColumnProps {\n  title: string | number;\n  url: string;\n}\n\nconst HeaderGridColumn = ({ title, url }: HeaderGridColumnProps): React.ReactElement => {\n  if (title && title !== '') {\n    return (\n      <Grid.Column>\n        <Header inverted textAlign='left'>\n          <a href={url} className='link'>\n            {title}\n          </a>\n        </Header>\n      </Grid.Column>\n    );\n  }\n  return <div />;\n};\n\nexport default HeaderGridColumn;\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport { TextGridRow } from '.';\n\ninterface Relations {\n  [key: string]: string[];\n}\n\ninterface RelationsGridColumnProps {\n  relations: Relations;\n}\n\nconst RelationsGridColumn = ({ relations }: RelationsGridColumnProps): React.ReactElement => {\n  return (\n    <Grid.Column>\n      {Object.entries(relations).map((r) => {\n        return <TextGridRow label={`${r[0]}`} text={r[1].join(', ')} />;\n      })}\n    </Grid.Column>\n  );\n};\n\nexport default RelationsGridColumn;\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\n\ninterface ListGridColumnProps {\n  label: string;\n  data: (string | number)[];\n}\n\nconst ListGridColumn = ({ label, data }: ListGridColumnProps): React.ReactElement => {\n  return (\n    <Grid.Column>\n      <Grid.Row key={label} className='half-grid-row'>\n        <span className='bold'>{label}</span>\n      </Grid.Row>\n      {data && data.length > 0\n        ? data.map((x, i) => (\n            <Grid.Row key={`${label}${i + 1}`} className='half-grid-row'>\n              {i + 1}. {x}\n            </Grid.Row>\n          ))\n        : 'None'}\n    </Grid.Column>\n  );\n};\n\nexport default ListGridColumn;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchLoader from './SearchLoader';\nimport BlurredImage from './BlurredImage';\nimport {\n  TextGridRow,\n  TextGridColumn,\n  HeaderGridRow,\n  RelationsGridColumn,\n  ListGridColumn,\n} from './grids';\n\ninterface AnimeProps {\n  query: string;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Anime = ({ query }: AnimeProps): React.ReactElement => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [source, setSource] = useState<string>('');\n  const [episodes, setEpisodes] = useState<number>(0);\n  const [status, setStatus] = useState<string>('');\n  const [premiered, setPremiered] = useState<string>('');\n  const [aired, setAired] = useState<string>('');\n  const [duration, setDuration] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [studios, setStudios] = useState<string[]>([]);\n  const [genres, setGenres] = useState<string[]>([]);\n  const [openings, setOpenings] = useState<string[]>([]);\n  const [endings, setEndings] = useState<string[]>([]);\n\n  const fetchData = async (search: string) => {\n    setMessage(<SearchLoader />);\n    setFound(false);\n\n    const response = await fetch(`${api}/anime/${search}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setSource(data.source);\n      setEpisodes(data.episodes ? data.episodes : '?');\n      setStatus(data.status);\n      setPremiered(data.premiered);\n      setAired(data.aired ? data.aired.string : '?');\n      setDuration(data.duration);\n      setRating(data.rating);\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setStudios(data.studios);\n      setGenres(data.genres);\n      setOpenings(data.openings);\n      setEndings(data.endings);\n    } else {\n      setFound(false);\n      setMessage('Anime not found');\n    }\n  };\n\n  useEffect(() => {\n    if (!query || !/\\S/.test(query)) {\n      setFound(false);\n      setMessage('Invalid query');\n    } else {\n      fetchData(query);\n    }\n  }, [query]);\n\n  if (found)\n    return (\n      <Container className='query'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column computer={4} widescreen={4} largeScreen={4} tablet={6} mobile={6}>\n            <BlurredImage imageUrl={imageUrl} score={score} imageNSFW={false} />\n          </Grid.Column>\n          <Grid.Column computer={12} widescreen={12} largeScreen={12} tablet={10} mobile={10}>\n            <HeaderGridRow title={title} url={url} />\n            <TextGridRow label='English Title' text={titleEnglish} />\n            <TextGridRow label={['Type', 'Episodes']} text={[type, episodes]} />\n            <TextGridRow label='Status' text={status} />\n            <TextGridRow label='Rating' text={rating} />\n            <TextGridRow label='Studios' text={studios.join(', ')} />\n            <TextGridRow label='Source' text={source} />\n            <TextGridRow label='Duration' text={duration} />\n            <TextGridRow label='Season' text={premiered} />\n            <TextGridRow label='Aired' text={aired} />\n            <TextGridRow label='Genres' text={genres.join(', ')} />\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <TextGridColumn label='Synopsis' text={synopsis} />\n          <RelationsGridColumn relations={relations} />\n          <ListGridColumn label='Openings' data={openings} />\n          <ListGridColumn label='Endings' data={endings} />\n        </Grid>\n      </Container>\n    );\n\n  return <Container className='query'>{message}</Container>;\n};\n\nexport default Anime;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchLoader from './SearchLoader';\nimport BlurredImage from './BlurredImage';\nimport { TextGridRow, TextGridColumn, HeaderGridRow, RelationsGridColumn } from './grids';\n\ninterface MangaProps {\n  query: string;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Manga = ({ query }: MangaProps): React.ReactElement => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [volumes, setVolumes] = useState<number | string>(0);\n  const [chapters, setChapters] = useState<number | string>(0);\n  const [status, setStatus] = useState<string>('');\n  const [published, setPublished] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [genres, setGenres] = useState<string[]>([]);\n  const [authors, setAuthors] = useState<string[]>([]);\n  const [serializations, setSerializations] = useState<string[]>([]);\n\n  const fetchData = async (search: string) => {\n    setMessage(<SearchLoader />);\n    setFound(false);\n\n    const response = await fetch(`${api}/manga/${search}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setVolumes(data.volumes ? data.volumes : '?');\n      setChapters(data.chapters ? data.chapters : '?');\n      setStatus(data.status);\n      setPublished(data.published ? data.published.string : '');\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setGenres(data.genres);\n      setAuthors(data.authors);\n      setSerializations(data.serializations);\n    } else {\n      setFound(false);\n      setMessage('Manga not found');\n    }\n  };\n\n  useEffect(() => {\n    if (!query || !/\\S/.test(query)) {\n      setFound(false);\n      setMessage('Invalid query');\n    } else {\n      fetchData(query);\n    }\n  }, [query]);\n\n  const nameConverter = (names: string[]): string => {\n    return names.map((n) => n.split(', ').reverse().join(' ')).join(', ');\n  };\n\n  if (found)\n    return (\n      <Container className='query'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column computer={4} widescreen={4} largeScreen={4} tablet={6} mobile={6}>\n            <BlurredImage imageUrl={imageUrl} score={score} imageNSFW={false} />\n          </Grid.Column>\n          <Grid.Column computer={12} widescreen={12} largeScreen={12} tablet={10} mobile={10}>\n            <HeaderGridRow title={title} url={url} />\n            <TextGridRow label='English Title' text={titleEnglish} />\n            <TextGridRow label={['Type', 'Status']} text={[type, status]} />\n            <TextGridRow label={['Volumes', 'Chapters']} text={[volumes, chapters]} />\n            <TextGridRow label='Published' text={published} />\n            <TextGridRow label='Authors' text={nameConverter(authors)} />\n            <TextGridRow label='Serializations' text={serializations.join(', ')} />\n            <TextGridRow label='Genres' text={genres.join(', ')} />\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <TextGridColumn label='Synopsis' text={synopsis} />\n          <RelationsGridColumn relations={relations} />\n        </Grid>\n      </Container>\n    );\n\n  return <Container className='query'>{message}</Container>;\n};\n\nexport default Manga;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchLoader from './SearchLoader';\nimport BlurredImage from './BlurredImage';\nimport { TextGridRow, TextGridColumn, HeaderGridRow, RelationsGridColumn } from './grids';\n\ninterface LightNovelProps {\n  query: string;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst LightNovel = ({ query }: LightNovelProps): React.ReactElement => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [volumes, setVolumes] = useState<number | string>(0);\n  const [chapters, setChapters] = useState<number | string>(0);\n  const [status, setStatus] = useState<string>('');\n  const [published, setPublished] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [genres, setGenres] = useState<string[]>([]);\n  const [authors, setAuthors] = useState<string[]>([]);\n\n  const fetchData = async (search: string) => {\n    setMessage(<SearchLoader />);\n    setFound(false);\n\n    const response = await fetch(`${api}/ln/${search}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setVolumes(data.volumes ? data.volumes : '?');\n      setChapters(data.chapters ? data.chapters : '?');\n      setStatus(data.status);\n      setPublished(data.published ? data.published.string : '');\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setGenres(data.genres);\n      setAuthors(data.authors);\n    } else {\n      setFound(false);\n      setMessage('Light novel not found');\n    }\n  };\n\n  useEffect(() => {\n    if (!query || !/\\S/.test(query)) {\n      setFound(false);\n      setMessage('Invalid query');\n    } else {\n      fetchData(query);\n    }\n  }, [query]);\n\n  const nameConverter = (names: string[]): string => {\n    return names.map((n) => n.split(', ').reverse().join(' ')).join(', ');\n  };\n\n  if (found)\n    return (\n      <Container className='query'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column computer={4} widescreen={4} largeScreen={4} tablet={6} mobile={6}>\n            <BlurredImage imageUrl={imageUrl} score={score} imageNSFW={false} />\n          </Grid.Column>\n          <Grid.Column computer={12} widescreen={12} largeScreen={12} tablet={10} mobile={10}>\n            <HeaderGridRow title={title} url={url} />\n            <TextGridRow label='English Title' text={titleEnglish} />\n            <TextGridRow label={['Type', 'Status']} text={[type, status]} />\n            <TextGridRow label={['Volumes', 'Chapters']} text={[volumes, chapters]} />\n            <TextGridRow label='Published' text={published} />\n            <TextGridRow label='Authors' text={nameConverter(authors)} />\n            <TextGridRow label='Genres' text={genres.join(', ')} />\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <TextGridColumn label='Synopsis' text={synopsis} />\n          <RelationsGridColumn relations={relations} />\n        </Grid>\n      </Container>\n    );\n\n  return <Container className='query'>{message}</Container>;\n};\n\nexport default LightNovel;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchLoader from './SearchLoader';\nimport BlurredImage from './BlurredImage';\nimport { TextGridRow, HeaderGridRow, TextGridColumn } from './grids';\n\ninterface VisualNovelProps {\n  query: string;\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst VisualNovel = ({ query }: VisualNovelProps): React.ReactElement => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [imageNSFW, setImageNSFW] = useState<boolean>(false);\n  const [released, setReleased] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [tags, setTags] = useState<string[]>([]);\n  const [staff, setStaff] = useState<string[]>([]);\n  const [anime, setAnime] = useState<boolean>(false);\n  const [length, setLength] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n\n  const fetchData = async (search: string) => {\n    setMessage(<SearchLoader />);\n    setFound(false);\n\n    const response = await fetch(`${api}/vn/${search}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setImageNSFW(data.image_nsfw);\n      setDescription(data.description);\n      setTags(data.tags);\n      setStaff(data.staff);\n      setAnime(data.anime);\n      setLength(data.length);\n      setScore(data.score);\n      const releasedDate = data.released ? new Date(data.released) : null;\n      if (releasedDate) {\n        setReleased(\n          releasedDate.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n          })\n        );\n      } else {\n        setReleased('?');\n      }\n    } else {\n      setFound(false);\n      setMessage('Visual novel not found');\n    }\n  };\n\n  useEffect(() => {\n    if (!query || !/\\S/.test(query)) {\n      setFound(false);\n      setMessage('Invalid query');\n    } else {\n      fetchData(query);\n    }\n  }, [query]);\n\n  if (found) {\n    return (\n      <Container className='query'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column computer={4} widescreen={4} largeScreen={4} tablet={6} mobile={6}>\n            <BlurredImage imageUrl={imageUrl} score={score} imageNSFW={imageNSFW} />\n          </Grid.Column>\n          <Grid.Column computer={12} widescreen={12} largeScreen={12} tablet={10} mobile={10}>\n            <HeaderGridRow title={title} url={url} />\n            <TextGridRow label='Type' text='Visual Novel' />\n            <TextGridRow label='Released' text={released} />\n            <TextGridRow label='Length' text={length} />\n            <TextGridRow label='Anime Adaptation' text={anime ? 'Yes' : 'No'} />\n            <TextGridRow label='Staff' text={staff.join(', ')} />\n            <TextGridRow label='Tags' text={tags.slice(0, 20).join(', ')} />\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <TextGridColumn label='Description' text={description} />\n        </Grid>\n      </Container>\n    );\n  }\n\n  return <Container className='query'>{message}</Container>;\n};\n\nexport default VisualNovel;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchLoader from './SearchLoader';\nimport { TextGridColumn, HeaderGridColumn } from './grids';\n\ninterface DoujinProps {\n  query: string;\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Doujin = ({ query }: DoujinProps): React.ReactElement => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [id, setId] = useState<number>(0);\n  const [title, setTitle] = useState<string>('');\n  const [uploadDate, setUploadDate] = useState<string>('');\n  const [pages, setPages] = useState(0);\n  const [characters, setCharacters] = useState([]);\n  const [parodies, setParodies] = useState([]);\n  const [tags, setTags] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [url, setUrl] = useState('');\n\n  const fetchData = async (search: string) => {\n    setMessage(<SearchLoader />);\n    setFound(false);\n\n    const response = await fetch(`${api}/doujin/${search}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFound(true);\n      setId(data.id);\n      setTitle(data.title);\n      setPages(data.pages);\n      setCharacters(data.characters);\n      setParodies(data.parodies);\n      setTags(data.tags);\n      setArtists(data.artists);\n      setGroups(data.groups);\n      setLanguages(data.languages);\n      setCategories(data.categories);\n      setUrl(data.url);\n      const upload = data.upload_date ? new Date(data.upload_date) : null;\n      if (upload) {\n        setUploadDate(\n          upload.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })\n        );\n      } else {\n        setUploadDate('?');\n      }\n    } else {\n      setFound(false);\n      setMessage('Doujin not found');\n    }\n  };\n\n  useEffect(() => {\n    if (!query || !/\\S/.test(query)) {\n      setFound(false);\n      setMessage('Invalid query');\n    } else {\n      fetchData(query);\n    }\n  }, [query]);\n\n  if (found) {\n    return (\n      <Container className='query'>\n        <Grid columns={1} textAlign='left'>\n          <HeaderGridColumn title={id} url={url} />\n          <TextGridColumn label='Title' text={title} />\n          <TextGridColumn label='Pages' text={pages} />\n          <TextGridColumn label='Upload Date' text={uploadDate} />\n          <TextGridColumn label='Characters' text={characters.join(', ')} />\n          <TextGridColumn label='Parodies' text={parodies.join(', ')} />\n          <TextGridColumn label='Tags' text={tags.join(', ')} />\n          <TextGridColumn label='Artists' text={artists.join(', ')} />\n          <TextGridColumn label='Groups' text={groups.join(', ')} />\n          <TextGridColumn label='Languages' text={languages.join(', ')} />\n          <TextGridColumn label='Categories' text={categories.join(', ')} />\n        </Grid>\n      </Container>\n    );\n  }\n\n  return <Container className='query'>{message}</Container>;\n};\n\nexport default Doujin;\n","import React from 'react';\nimport { Container } from 'semantic-ui-react';\n\ninterface ErrorMessageProps {\n  message: string;\n}\n\nconst ErrorMessage = ({ message }: ErrorMessageProps): React.ReactElement => {\n  return <Container className='query'>{message}</Container>;\n};\n\nexport default ErrorMessage;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Input, Segment, Tab, TabProps } from 'semantic-ui-react';\nimport Anime from './Anime';\nimport Manga from './Manga';\nimport LightNovel from './LightNovel';\nimport VisualNovel from './VisualNovel';\nimport Doujin from './Doujin';\nimport ErrorMessage from './ErrorMessage';\n\ninterface Pane {\n  menuItem: string;\n  placeholder: string;\n}\n\nconst panes: Pane[] = [\n  { menuItem: 'Auto', placeholder: '{anime}, <manga>, [light novel], |visual novel|, (doujin)' },\n  { menuItem: 'Anime', placeholder: 'Search by anime name' },\n  { menuItem: 'Manga', placeholder: 'Search by manga name' },\n  { menuItem: 'Light Novel', placeholder: 'Search by light novel name' },\n  { menuItem: 'Visual Novel', placeholder: 'Search by visual novel name' },\n  { menuItem: 'Doujin', placeholder: 'Search by doujin digits' },\n];\n\nconst styles = {\n  container: { width: '50%' },\n  tab: { overflow: 'auto', margin: 'auto', padding: '1px' },\n  input: { width: '100%' },\n};\n\nconst Search = (): React.ReactElement => {\n  const [placeholder, setPlaceholder] = useState<string>('Search');\n  const [index, setIndex] = useState<number>(0);\n  const [query, setQuery] = useState<string>('');\n  const [active, setActive] = useState<React.ReactElement | null>(null);\n\n  useEffect(() => {\n    setPlaceholder(panes[index].placeholder);\n  }, [index]);\n\n  const handleTabChange = (event: React.MouseEvent<HTMLDivElement>, data: TabProps) => {\n    setIndex(data.activeIndex as number);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const parseIndex = (): number => {\n    if (index > 0) {\n      return index;\n    }\n    if (query.length <= 2) {\n      return -1;\n    }\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    if (first === '{' && last === '}') {\n      return 1;\n    }\n    if (first === '<' && last === '>') {\n      return 2;\n    }\n    if (first === '[' && last === ']') {\n      return 3;\n    }\n    if (first === '|' && last === '|') {\n      return 4;\n    }\n    if (first === '(' && last === ')') {\n      return 5;\n    }\n\n    return -1;\n  };\n\n  const parseQuery = (): string => {\n    if (query.length <= 2) {\n      return query;\n    }\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    if (\n      (first === '{' && last === '}') ||\n      (first === '<' && last === '>') ||\n      (first === '[' && last === ']') ||\n      (first === '|' && last === '|') ||\n      (first === '(' && last === ')')\n    ) {\n      return query.slice(1, -1);\n    }\n\n    return query;\n  };\n\n  const handleClick = () => {\n    if (!query || !/\\S/.test(query)) {\n      setActive(null);\n      return;\n    }\n    const currentIndex = parseIndex();\n    const currentQuery = parseQuery();\n\n    switch (currentIndex) {\n      case 1:\n        setActive(<Anime query={currentQuery} />);\n        break;\n      case 2:\n        setActive(<Manga query={currentQuery} />);\n        break;\n      case 3:\n        setActive(<LightNovel query={currentQuery} />);\n        break;\n      case 4:\n        setActive(<VisualNovel query={currentQuery} />);\n        break;\n      case 5:\n        setActive(<Doujin query={currentQuery} />);\n        break;\n      default:\n        setActive(<ErrorMessage message='Invalid search pattern' />);\n        break;\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      handleClick();\n    }\n  };\n\n  return (\n    <div>\n      <Container style={styles.container}>\n        <Segment inverted style={styles.tab}>\n          <Tab\n            panes={panes}\n            menu={{\n              attached: true,\n              tabular: true,\n              inverted: true,\n            }}\n            renderActiveOnly\n            onTabChange={handleTabChange}\n          />\n        </Segment>\n        <Input\n          inverted\n          style={styles.input}\n          size='small'\n          placeholder={placeholder}\n          onKeyDown={handleKeyDown}\n          onChange={handleInputChange}\n          action={{\n            icon: 'search',\n            onClick: () => {\n              handleClick();\n            },\n          }}\n        />\n      </Container>\n      <Container>{active}</Container>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport Status from './components/Status';\nimport Title from './components/Title';\nimport Search from './components/Search';\nimport './App.css';\n\nconst App = (): React.ReactElement => {\n  return (\n    <div className='App'>\n      <Status />\n      <Title />\n      <Search />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}