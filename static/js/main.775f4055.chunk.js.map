{"version":3,"sources":["components/Title.tsx","components/Search.tsx","components/Anime.tsx","components/Manga.tsx","components/LightNovel.tsx","components/VisualNovel.tsx","components/Doujin.tsx","components/ErrorMessage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","title","Header","size","inverted","style","margin","Menu","Item","href","target","marginLeft","Icon","name","panes","menuItem","placeholder","Search","index","setIndex","setQuery","handleClick","useState","setPlaceholder","useEffect","Container","width","Segment","overflow","padding","Tab","menu","attached","tabular","renderActiveOnly","onTabChange","event","data","activeIndex","Input","action","icon","onClick","onChange","value","onKeyDown","key","Anime","forwardRef","ref","query","active","found","setFound","message","setMessage","setTitle","titleEnglish","setTitleEnglish","url","setUrl","imageUrl","setImageUrl","type","setType","source","setSource","episodes","setEpisodes","status","setStatus","premiered","setPremiered","aired","setAired","duration","setDuration","rating","setRating","score","setScore","synopsis","setSynopsis","relations","setRelations","studios","setStudios","genres","setGenres","openings","setOpenings","endings","setEndings","fetchData","a","loader","Loader","inline","first","charAt","last","slice","search","fetch","process","response","json","useImperativeHandle","textGridRow","Grid","Row","marginBottom","className","columns","textAlign","Column","largeScreen","tablet","mobile","Image","src","fluid","label","color","content","ribbon","join","Object","entries","map","r","length","x","i","Manga","volumes","setVolumes","chapters","setChapters","published","setPublished","authors","setAuthors","serializations","setSerializations","names","n","split","reverse","LightNovel","VisualNovel","blurred","setBlurred","imageNSFW","setImageNSFW","released","setReleased","description","setDescription","tags","setTags","staff","setStaff","anime","setAnime","setLength","releasedDate","Date","toLocaleDateString","year","month","day","Dimmer","Dimmable","as","blurring","dimmed","Button","Doujin","id","setId","uploadDate","setUploadDate","pages","setPages","characters","setCharacters","parodies","setParodies","artists","setArtists","groups","setGroups","languages","setLanguages","categories","setCategories","upload","arrayGridColumn","array","ErrorMessage","App","setActive","animeRef","useRef","mangaRef","lightNovelRef","visualNovelRef","doujinRef","test","parsePattern","current","border","lineHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.775f4055.chunk.js","sourcesContent":["import React from 'react';\nimport { Header, Icon, Menu } from 'semantic-ui-react'\n\ninterface Props {\n  title: string;\n}\n\nfunction Title({ title }: Props) {\n  return (\n    <div>\n      <Header size='huge' inverted style={{ margin: '30px' }}>\n        {title}\n        <Menu.Item href=\"https://github.com/f4str/sauce-searcher\" target=\"_blank\" style={{ marginLeft: '10px' }}>\n          <Icon name=\"github\" inverted />\n        </Menu.Item>\n      </Header>\n    </div>\n  );\n}\n\nexport default Title;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Input, Segment, Tab, TabProps } from 'semantic-ui-react';\n\ninterface Props {\n  index: number;\n  setIndex: React.Dispatch<React.SetStateAction<number>>;\n  setQuery: React.Dispatch<React.SetStateAction<string>>;\n  handleClick: () => void;\n}\n\ninterface Pane {\n  menuItem: string;\n  placeholder: string;\n}\n\nconst panes: Pane[] = [\n  { menuItem: 'Auto', placeholder: '{anime}, <manga>, [light novel], |visual novel|, (doujin)' },\n  { menuItem: 'Anime', placeholder: 'Search by anime name' },\n  { menuItem: 'Manga', placeholder: 'Search by manga name' },\n  { menuItem: 'Light Novel', placeholder: 'Search by light novel name' },\n  { menuItem: 'Visual Novel', placeholder: 'Search by visual novel name' },\n  { menuItem: 'Doujin', placeholder: 'Search by doujin digits' },\n];\n\nfunction Search({ index, setIndex, setQuery, handleClick }: Props) {\n  const [placeholder, setPlaceholder] = useState<string>('Search');\n  \n  useEffect(() => {\n    setPlaceholder(panes[index].placeholder)\n  }, [index]);\n  \n  const handleTabChange = (event: React.MouseEvent<HTMLDivElement>, data: TabProps) => {\n    setIndex(data.activeIndex as number);\n  };\n  \n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n  \n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      handleClick();\n    }\n  }\n  \n  return (\n    <Container style={{ width: '50%' }}>\n      <Segment inverted \n        style={{overflow: 'auto', margin: 'auto', padding: '1px' }}>\n        <Tab panes={panes} \n          menu={{\n            attached: true,\n            tabular: true,\n            inverted: true,\n          }}\n          renderActiveOnly={true}\n          onTabChange={handleTabChange}\n        />\n      </Segment>\n      <Input action={{ \n          icon: 'search',\n          onClick: () => {handleClick()}\n        }} \n        style={{ width: '100%' }}\n        size='small' \n        placeholder={placeholder}\n        inverted \n        onChange={handleInputChange} \n        onKeyDown={handleKeyDown}\n      />\n    </Container>\n  );\n}\n\nexport default Search;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader } from 'semantic-ui-react';\n\ninterface AnimeProps {\n  query: string;\n  active: string | null;\n}\n\ninterface Relations {\n  [key: string]: string[]\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Anime = forwardRef(({ query, active }: AnimeProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | JSX.Element>('');\n  \n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [source, setSource] = useState<string>('');\n  const [episodes, setEpisodes] = useState<number>(0);\n  const [status, setStatus] = useState<string>('');\n  const [premiered, setPremiered] = useState<string>('');\n  const [aired, setAired] = useState<string>('');\n  const [duration, setDuration] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0)\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [studios, setStudios] = useState<string[]>([]);\n  const [genres, setGenres] = useState<string[]>([]);\n  const [openings, setOpenings] = useState<string[]>([]);\n  const [endings, setEndings] = useState<string[]>([]);\n  \n  const fetchData = async () => {\n    const loader = <Loader key='loader' active inline='centered' size='large'>Searching</Loader>;\n    setMessage(loader);\n    setFound(false);\n    \n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '{' && last === '}' ? query.slice(1, -1) : query;\n    \n    const response = await fetch(`${api}/anime/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data['title']);\n      setTitleEnglish(data['title_english']);\n      setUrl(data['url']);\n      setImageUrl(data['image']);\n      setType(data['type']);\n      setSource(data['source']);\n      setEpisodes(data['episodes'] ? data['episodes'] : '?');\n      setStatus(data['status']);\n      setPremiered(data['premiered']);\n      setAired(data['aired'] ? data['aired']['string'] : '?');\n      setDuration(data['duration']);\n      setRating(data['rating']);\n      setScore(data['score']);\n      setSynopsis(data['synopsis']);\n      setRelations(data['relations']);\n      setStudios(data['studios']);\n      setGenres(data['genres']);\n      setOpenings(data['openings']);\n      setEndings(data['endings']);\n    }\n    else {\n      setFound(false);\n      setMessage('Anime not found');\n    }\n  };\n  \n  useImperativeHandle(ref, () => {\n    return {\n      fetchData: fetchData\n    };\n  });\n  \n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{marginBottom: '10px'}}>\n          <span className='bold'>{name}</span>{data}\n        </Grid.Row>\n      );\n    }\n    else {\n      return null;\n    }\n  };\n  \n  return (\n    <div>\n      { active === 'anime' ? found ?\n      <Container className='smaller-font'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n            <Image src={imageUrl} fluid label={{\n              color: 'blue',\n              content: score,\n              icon: 'star',\n              ribbon: true\n            }} />\n          </Grid.Column>\n          <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n            <Grid.Row style={{marginBottom: '10px'}}>\n              <Header inverted textAlign='left'><a href={url} className='link'>{title}</a></Header>\n            </Grid.Row>\n            {textGridRow('English Title: ', titleEnglish)}\n            <Grid.Row style={{marginBottom: '10px'}}>\n              <span className='bold'>Type: </span>{type} | <span className='bold'>Episodes: </span>{episodes}\n            </Grid.Row>\n            {textGridRow('Status: ', status)}\n            {textGridRow('Rating: ', rating)}\n            {textGridRow('Studios: ', studios.join(', '))}\n            {textGridRow('Source: ', source)}\n            {textGridRow('Duration: ', duration)}\n            {textGridRow('Season: ', premiered)}\n            {textGridRow('Aired: ', aired)}\n            {textGridRow('Genres: ', genres.join(', '))}\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <Grid.Column>\n            <span className='bold'>Synopsis:</span> {synopsis}\n          </Grid.Column>\n          <Grid.Column>\n            {Object.entries(relations).map(r => {\n              return textGridRow(`${r[0]}: `, r[1].join(', '))\n            })}\n          </Grid.Column>\n          <Grid.Column>\n            <Grid.Row style={{marginBottom: '5px'}}><span className='bold'>Openings</span></Grid.Row>\n            {openings && openings.length > 0 ? \n            openings.map((x, i) => {\n              return <Grid.Row key={`op${i}`} style={{marginBottom: '5px'}}>{i+1}. {x}</Grid.Row>\n            })\n            : 'None'}\n          </Grid.Column>\n          <Grid.Column>\n            <Grid.Row style={{marginBottom: '5px'}}><span className='bold'>Endings</span></Grid.Row>\n            {endings && endings.length > 0 ?\n            endings.map((x, i) => {\n              return <Grid.Row key={`ed${i}`} style={{marginBottom: '5px'}}>{i+1}. {x}</Grid.Row>\n            })\n            : 'None'}\n          </Grid.Column>\n        </Grid>\n      </Container>\n      : message : null }\n    </div>\n  );\n});\n\nexport default Anime;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader } from 'semantic-ui-react';\n\ninterface MangaProps {\n  query: string;\n  active: string | null;\n}\n\ninterface Relations {\n  [key: string]: string[]\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Manga = forwardRef(({ query, active }: MangaProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | JSX.Element>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [volumes, setVolumes] = useState<number | string>(0);\n  const [chapters, setChapters] = useState<number | string>(0);\n  const [status, setStatus] = useState<string>('');\n  const [published, setPublished] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0)\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [genres, setGenres] = useState<string[]>([]);\n  const [authors, setAuthors] = useState<string[]>([]);\n  const [serializations, setSerializations] = useState<string[]>([]);\n  \n  const fetchData = async () => {\n    const loader = <Loader key='loader' active inline='centered' size='large'>Searching</Loader>;\n    setMessage(loader);\n    setFound(false);\n    \n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '<' && last === '>' ? query.slice(1, -1) : query;\n    \n    const response = await fetch(`${api}/manga/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data['title']);\n      setTitleEnglish(data['title_english']);\n      setUrl(data['url']);\n      setImageUrl(data['image']);\n      setType(data['type']);\n      setVolumes(data['volumes'] ? data['volumes'] : '?');\n      setChapters(data['chapters'] ? data['chapters'] : '?');\n      setStatus(data['status']);\n      setPublished(data['published'] ? data['published']['string'] : '');\n      setRating(data['rating']);\n      setScore(data['score']);\n      setSynopsis(data['synopsis']);\n      setRelations(data['relations']);\n      setGenres(data['genres']);\n      setAuthors(data['authors']);\n      setSerializations(data['serializations']);\n    }\n    else {\n      setFound(false);\n      setMessage('Manga not found');\n    }\n  };\n  \n  useImperativeHandle(ref, () => {\n    return {\n      fetchData: fetchData\n    };\n  });\n  \n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{marginBottom: '10px'}}>\n          <span className='bold'>{name}</span>{data}\n        </Grid.Row>\n      );\n    }\n    else {\n      return null;\n    }\n  };\n  \n  const nameConverter = (names : string[]) => {\n    return names.map(n => n.split(', ').reverse().join(\" \")).join(', ');\n  };\n  \n  return (\n    <div>\n      { active === 'manga' ? found ?\n      <Container className='smaller-font'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n            <Image src={imageUrl} fluid label={{\n              color: 'blue',\n              content: score,\n              icon: 'star',\n              ribbon: true\n            }} />\n          </Grid.Column>\n          <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n            <Grid.Row style={{marginBottom: '10px'}}>\n              <Header inverted textAlign='left'><a href={url} className='link'>{title}</a></Header>\n            </Grid.Row>\n            {textGridRow('English Title: ', titleEnglish)}\n            <Grid.Row style={{marginBottom: '10px'}}>\n              <span className='bold'>Type: </span>{type} | <span className='bold'>Status: </span>{status}\n            </Grid.Row>\n            <Grid.Row style={{marginBottom: '10px'}}>\n              <span className='bold'>Volumes: </span>{volumes} | <span className='bold'>Chapters: </span>{chapters}\n            </Grid.Row>\n            {textGridRow('Rating: ', rating)}\n            {textGridRow('Published: ', published)}\n            {textGridRow('Authors: ', nameConverter(authors))}\n            {textGridRow('Serializations: ', serializations.join(', '))}\n            {textGridRow('Genres: ', genres.join(', '))}\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <Grid.Column>\n            <span className='bold'>Synopsis:</span> {synopsis}\n          </Grid.Column>\n          <Grid.Column>\n            {Object.entries(relations).map(r => {\n              return textGridRow(`${r[0]}: `, r[1].join(', '))\n            })}\n          </Grid.Column>\n        </Grid>\n      </Container>\n      : message : null }\n    </div>\n  );\n});\n\nexport default Manga;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader } from 'semantic-ui-react';\n\ninterface LightNovelProps {\n  query: string;\n  active: string | null;\n}\n\ninterface Relations {\n  [key: string]: string[]\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst LightNovel = forwardRef(({ query, active }: LightNovelProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | JSX.Element>('');\n  \n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [volumes, setVolumes] = useState<number | string>(0);\n  const [chapters, setChapters] = useState<number | string>(0);\n  const [status, setStatus] = useState<string>('');\n  const [published, setPublished] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0)\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [genres, setGenres] = useState<string[]>([]);\n  const [authors, setAuthors] = useState<string[]>([]);\n  \n  const fetchData = async () => {\n    const loader = <Loader key='loader' active inline='centered' size='large'>Searching</Loader>;\n    setMessage(loader);\n    setFound(false);\n    \n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '[' && last === ']' ? query.slice(1, -1) : query;\n    \n    const response = await fetch(`${api}/ln/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data['title']);\n      setTitleEnglish(data['title_english']);\n      setUrl(data['url']);\n      setImageUrl(data['image']);\n      setType(data['type']);\n      setVolumes(data['volumes'] ? data['volumes'] : '?');\n      setChapters(data['chapters'] ? data['chapters'] : '?');\n      setStatus(data['status']);\n      setPublished(data['published'] ? data['published']['string'] : '');\n      setRating(data['rating']);\n      setScore(data['score']);\n      setSynopsis(data['synopsis']);\n      setRelations(data['relations']);\n      setGenres(data['genres']);\n      setAuthors(data['authors']);\n    }\n    else {\n      setFound(false);\n      setMessage('Light novel not found');\n    }\n  };\n  \n  useImperativeHandle(ref, () => {\n    return {\n      fetchData: fetchData\n    };\n  });\n  \n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{marginBottom: '10px'}}>\n          <span className='bold'>{name}</span>{data}\n        </Grid.Row>\n      );\n    }\n    else {\n      return null;\n    }\n  };\n  \n  const nameConverter = (names: string[]) => {\n    return names.map(n => n.split(', ').reverse().join(\" \")).join(', ');\n  };\n  \n  return (\n    <div>\n      { active === 'light novel' ? found ?\n      <Container className='smaller-font'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n            <Image src={imageUrl} fluid label={{\n              color: 'blue',\n              content: score,\n              icon: 'star',\n              ribbon: true\n            }} />\n          </Grid.Column>\n          <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n            <Grid.Row style={{marginBottom: '10px'}}>\n              <Header inverted textAlign='left'><a href={url} className='link'>{title}</a></Header>\n            </Grid.Row>\n            {textGridRow('English Title: ', titleEnglish)}\n            <Grid.Row style={{marginBottom: '10px'}}>\n              <span className='bold'>Type: </span>{type} | <span className='bold'>Status: </span>{status}\n            </Grid.Row>\n            <Grid.Row style={{marginBottom: '10px'}}>\n              <span className='bold'>Volumes: </span>{volumes} | <span className='bold'>Chapters: </span>{chapters}\n            </Grid.Row>\n            {textGridRow('Rating: ', rating)}\n            {textGridRow('Published: ', published)}\n            {textGridRow('Authors: ', nameConverter(authors))}\n            {textGridRow('Genres: ', genres.join(', '))}\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          <Grid.Column>\n            <span className='bold'>Synopsis:</span> {synopsis}\n          </Grid.Column>\n          <Grid.Column>\n            {Object.entries(relations).map(r => {\n              return textGridRow(`${r[0]}: `, r[1].join(', '))\n            })}\n          </Grid.Column>\n        </Grid>\n      </Container>\n      : message : null }\n    </div>\n  );\n});\n\nexport default LightNovel;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader, Dimmer, Button } from 'semantic-ui-react';\n\ninterface VisualNovelProps {\n  query: string;\n  active: string | null;\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst VisualNovel = forwardRef(({ query, active }: VisualNovelProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | JSX.Element>('');\n  const [blurred, setBlurred] = useState<boolean>(true);\n  \n  const [title, setTitle] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [imageNSFW, setImageNSFW] = useState<boolean>(false);\n  const [released, setReleased] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [tags, setTags] = useState<string[]>([]);\n  const [staff, setStaff] = useState<string[]>([]);\n  const [anime, setAnime] = useState<boolean>(false);\n  const [length, setLength] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  \n  const fetchData = async () => {\n    const loader = <Loader key='loader' active inline='centered' size='large'>Searching</Loader>;\n    setMessage(loader);\n    setFound(false);\n    \n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '|' && last === '|' ? query.slice(1, -1) : query;\n    \n    const response = await fetch(`${api}/vn/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setBlurred(true);\n      setTitle(data['title']);\n      setUrl(data['url']);\n      setImageUrl(data['image']);\n      setImageNSFW(data['image_nsfw']);\n      setDescription(data['description']);\n      setTags(data['tags']);\n      setStaff(data['staff']);\n      setAnime(data['anime']);\n      setLength(data['length']);\n      setScore(data['score']);\n      const releasedDate = data['released'] ? new Date(data['released']) : null;\n      if (releasedDate) {\n        setReleased(releasedDate.toLocaleDateString(\"en-US\", {year: 'numeric', month: 'long', day: 'numeric'}));\n      }\n      else {\n        setReleased('?')\n      }\n    }\n    else {\n      setFound(false);\n      setMessage('Visual novel not found');\n    }\n  };\n  \n  useImperativeHandle(ref, () => {\n    return {\n      fetchData: fetchData\n    };\n  });\n  \n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{marginBottom: '10px'}}>\n          <span className='bold'>{name}</span>{data}\n        </Grid.Row>\n      );\n    }\n    else {\n      return null;\n    }\n  };\n  \n  return (\n    <div>\n      { active === 'visual novel' ? found ?\n      <Container className='smaller-font'>\n        <Grid columns={2} textAlign='left'>\n          <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n            { !imageNSFW ?\n            <Image src={imageUrl} fluid \n              label={{\n                color: 'blue',\n                content: score,\n                icon: 'star',\n                ribbon: true\n              }}\n            />\n            :\n            <Dimmer.Dimmable as={Image} fluid blurring dimmed={blurred}>\n              <Dimmer active={blurred}>\n                <Header as='h2' inverted>\n                  NSFW\n                </Header>\n                <Button onClick={() => {setBlurred(false)}}>View</Button>\n              </Dimmer>\n              <Image src={imageUrl} fluid \n                label={{\n                  color: 'blue',\n                  content: score,\n                  icon: 'star',\n                  ribbon: true\n                }}\n                onClick={() => setBlurred(true)}\n                /> \n            </Dimmer.Dimmable>\n            }\n          </Grid.Column>\n          <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n            <Grid.Row style={{marginBottom: '10px'}}>\n              <Header inverted textAlign='left'><a href={url} className='link'>{title}</a></Header>\n            </Grid.Row>\n            {textGridRow('Type: ', 'Visual Novel')}\n            {textGridRow('Released: ', released)}\n            {textGridRow('Length: ', length)}\n            {textGridRow('Anime Adaptation: ', anime ? 'Yes' : 'No')}\n            {textGridRow('Staff: ', staff.join(', '))}\n            {textGridRow('Tags: ', tags.slice(0, 20).join(', '))}\n          </Grid.Column>\n        </Grid>\n        <Grid columns={1} textAlign='left'>\n          { description ?\n          <Grid.Column>\n            <span className='bold'>Description:</span> {description}\n          </Grid.Column>\n          : null }\n        </Grid>\n      </Container>\n      : message : null }\n    </div>\n  );\n});\n\nexport default VisualNovel;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Grid, Header, Loader } from 'semantic-ui-react';\n\ninterface DoujinProps {\n  query: string;\n  active: string | null;\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Doujin = forwardRef(({ query, active }: DoujinProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | JSX.Element>('');\n  \n  const [id, setId] = useState<number>(0);\n  const [title, setTitle] = useState<string>('');\n  const [uploadDate, setUploadDate] = useState<string>('');\n  const [pages, setPages] = useState(0);\n  const [characters, setCharacters] = useState([]);\n  const [parodies, setParodies] = useState([]);\n  const [tags, setTags] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [url, setUrl] = useState('');\n  \n  const fetchData = async () => {\n    const loader = <Loader key='loader' active inline='centered' size='large'>Searching</Loader>;\n    setMessage(loader);\n    setFound(false);\n    \n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '(' && last === ')' ? query.slice(1, -1) : query;\n    \n    const response = await fetch(`${api}/doujin/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setId(data['id']);\n      setTitle(data['title']);\n      setPages(data['pages']);\n      setCharacters(data['characters']);\n      setParodies(data['parodies']);\n      setTags(data['tags']);\n      setArtists(data['artists']);\n      setGroups(data['groups']);\n      setLanguages(data['languages']);\n      setCategories(data['categories']);\n      setUrl(data['url']);\n      const upload = data['upload_date'] ? new Date(data['upload_date']) : null;\n      if (upload) {\n        setUploadDate(upload.toLocaleDateString(\"en-US\", {year: 'numeric', month: 'long', day: 'numeric'}));\n      }\n      else {\n        setUploadDate('?')\n      }\n    }\n    else {\n      setFound(false);\n      setMessage('Doujin not found');\n    }\n  };\n  \n  useImperativeHandle(ref, () => {\n    return {\n      fetchData: fetchData\n    };\n  });\n  \n  const arrayGridColumn = (name: string, array: string[]) => {\n    if (array && array.length > 0) {\n      return (\n        <Grid.Column>\n          <span className='bold'>{name}</span>{array.join(', ')}\n        </Grid.Column>\n      );\n    }\n    else {\n      return null;\n    }\n  };\n  \n  return (\n    <div>\n      { active === 'doujin' ? found ?\n      <Grid columns={1} textAlign='left'>\n        <Grid.Column>\n          <Header inverted textAlign='left'><a href={url} className='link'>{id}</a></Header>\n        </Grid.Column>\n        <Grid.Column>\n          <span className='bold'>Title: </span>{title}\n        </Grid.Column>\n        <Grid.Column>\n          <span className='bold'>Pages: </span>{pages}\n        </Grid.Column>\n        <Grid.Column>\n          <span className='bold'>Upload Date: </span>{uploadDate}\n        </Grid.Column>\n        {arrayGridColumn('Characters: ', characters)}\n        {arrayGridColumn('Parodies: ', parodies)}\n        {arrayGridColumn('Tags: ', tags)}\n        {arrayGridColumn('Artists: ', artists)}\n        {arrayGridColumn('Groups: ', groups)}\n        {arrayGridColumn('Languages: ', languages)}\n        {arrayGridColumn('Categories: ', categories)}\n      </Grid> \n      : message : null }\n    </div>\n  );\n});\n\nexport default Doujin;\n","import React from 'react';\n\ninterface ErrorMessageProps {\n  active: string | null;\n  message: string;\n}\n\nfunction ErrorMessage({ active, message }: ErrorMessageProps) {\n  return (\n    <div>\n      { active === 'error' ? message : null }\n    </div>\n  );\n}\n\nexport default ErrorMessage;","import React, { useState, useRef } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport Title from './components/Title';\nimport Search from './components/Search';\nimport Anime from './components/Anime';\nimport Manga from './components/Manga';\nimport LightNovel from './components/LightNovel';\nimport VisualNovel from './components/VisualNovel';\nimport Doujin from './components/Doujin';\nimport ErrorMessage from './components/ErrorMessage';\nimport './App.css';\n\ninterface fetchDataRef {\n  fetchData: () => Promise<void>;\n}\n\nconst parsePattern = (query: string) => {\n  if (query.length <= 2) {\n    return -1;\n  }\n  \n  const first = query.charAt(0);\n  const last = query.slice(-1);\n  if (first === '{' && last === '}') {\n    return 1;\n  }\n  else if (first === '<' && last === '>') {\n    return 2;\n  }\n  else if (first === '[' && last === ']') {\n    return 3;\n  }\n  else if (first === '|' && last === '|') {\n    return 4;\n  }\n  else if (first === '(' && last === ')') {\n    return 5;\n  }\n  else {\n    return -1;\n  }\n};\n\nfunction App() {\n  const [index, setIndex] = useState<number>(0);\n  const [query, setQuery] = useState<string>('');\n  const [active, setActive] = useState<string | null>(null);\n  const [message, setMessage] = useState<string>('');\n  \n  const animeRef = useRef<fetchDataRef>(null);\n  const mangaRef = useRef<fetchDataRef>(null);\n  const lightNovelRef = useRef<fetchDataRef>(null);\n  const visualNovelRef = useRef<fetchDataRef>(null);\n  const doujinRef = useRef<fetchDataRef>(null);\n  \n  const handleClick = () => {\n    if (!query || !/\\S/.test(query)) {\n      setActive(null);\n      return;\n    }\n    const currentIndex = index > 0 && index <= 5 ? index : parsePattern(query);\n    switch (currentIndex) {\n      case 1:\n        setActive('anime');\n        if (animeRef.current) {\n          animeRef.current.fetchData();\n        }\n        break;\n      case 2:\n        setActive('manga');\n        if (mangaRef.current) {\n          mangaRef.current.fetchData();\n        }\n        break;\n      case 3:\n        setActive('light novel');\n        if (lightNovelRef.current) {\n          lightNovelRef.current.fetchData();\n        }\n        break;\n      case 4:\n        setActive('visual novel');\n        if (visualNovelRef.current) {\n          visualNovelRef.current.fetchData();\n        }\n        break;\n      case 5:\n        setActive('doujin');\n        if (doujinRef.current) {\n          doujinRef.current.fetchData();\n        }\n        break;\n      default:\n        setActive('error');\n        setMessage('Invalid search pattern');\n        break;\n    }\n  };\n  \n  return (\n    <div className=\"App\">\n      <Title title=\"Sauce Searcher\" />\n      <Search index={index} setIndex={setIndex} setQuery={setQuery} handleClick={handleClick} />\n      <Container style={{ margin: '30px', padding: '30px', border: active ? '2px solid white' : 'none', lineHeight: 'normal' }}>\n        <Anime ref={animeRef} query={query} active={active} />\n        <Manga ref={mangaRef} query={query} active={active} />\n        <LightNovel ref={lightNovelRef} query={query} active={active} />\n        <VisualNovel ref={visualNovelRef} query={query} active={active} />\n        <Doujin ref={doujinRef} query={query} active={active} />\n        <ErrorMessage active={active} message={message} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}