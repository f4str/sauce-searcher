{"version":3,"sources":["components/Title.tsx","components/Search.tsx","components/Anime.tsx","components/Manga.tsx","components/LightNovel.tsx","components/VisualNovel.tsx","components/Doujin.tsx","components/ErrorMessage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","title","Header","size","inverted","style","margin","Menu","Item","href","target","marginLeft","Icon","name","panes","menuItem","placeholder","Search","index","setIndex","setQuery","handleClick","useState","setPlaceholder","useEffect","Container","width","Segment","overflow","padding","Tab","menu","attached","tabular","renderActiveOnly","onTabChange","event","data","activeIndex","Input","action","icon","onClick","onChange","value","onKeyDown","key","Anime","forwardRef","ref","query","active","found","setFound","message","setMessage","setTitle","titleEnglish","setTitleEnglish","url","setUrl","imageUrl","setImageUrl","type","setType","source","setSource","episodes","setEpisodes","status","setStatus","premiered","setPremiered","aired","setAired","duration","setDuration","rating","setRating","score","setScore","synopsis","setSynopsis","relations","setRelations","studios","setStudios","genres","setGenres","openings","setOpenings","endings","setEndings","fetchData","a","loader","Loader","inline","first","charAt","last","slice","search","fetch","process","response","json","title_english","image","string","useImperativeHandle","textGridRow","Grid","Row","marginBottom","className","columns","textAlign","Column","largeScreen","tablet","mobile","Image","src","fluid","label","color","content","ribbon","join","Object","entries","map","r","length","x","i","Manga","volumes","setVolumes","chapters","setChapters","published","setPublished","authors","setAuthors","serializations","setSerializations","names","n","split","reverse","LightNovel","VisualNovel","blurred","setBlurred","imageNSFW","setImageNSFW","released","setReleased","description","setDescription","tags","setTags","staff","setStaff","anime","setAnime","setLength","image_nsfw","releasedDate","Date","toLocaleDateString","year","month","day","Dimmer","Dimmable","as","blurring","dimmed","Button","Doujin","id","setId","uploadDate","setUploadDate","pages","setPages","characters","setCharacters","parodies","setParodies","artists","setArtists","groups","setGroups","languages","setLanguages","categories","setCategories","upload","upload_date","arrayGridColumn","array","ErrorMessage","App","setActive","animeRef","useRef","mangaRef","lightNovelRef","visualNovelRef","doujinRef","test","parsePattern","current","border","lineHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4d136bd.chunk.js","sourcesContent":["import React from 'react';\nimport { Header, Icon, Menu } from 'semantic-ui-react';\n\ninterface TitleProps {\n  title: string;\n}\n\nconst Title = ({ title }: TitleProps): React.ReactElement => {\n  return (\n    <div>\n      <Header size=\"huge\" inverted style={{ margin: '30px' }}>\n        {title}\n        <Menu.Item\n          href=\"https://github.com/f4str/sauce-searcher\"\n          target=\"_blank\"\n          style={{ marginLeft: '10px' }}\n        >\n          <Icon name=\"github\" inverted />\n        </Menu.Item>\n      </Header>\n    </div>\n  );\n};\n\nexport default Title;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Input, Segment, Tab, TabProps } from 'semantic-ui-react';\n\ninterface SearchProps {\n  index: number;\n  setIndex: React.Dispatch<React.SetStateAction<number>>;\n  setQuery: React.Dispatch<React.SetStateAction<string>>;\n  handleClick: () => void;\n}\n\ninterface Pane {\n  menuItem: string;\n  placeholder: string;\n}\n\nconst panes: Pane[] = [\n  { menuItem: 'Auto', placeholder: '{anime}, <manga>, [light novel], |visual novel|, (doujin)' },\n  { menuItem: 'Anime', placeholder: 'Search by anime name' },\n  { menuItem: 'Manga', placeholder: 'Search by manga name' },\n  { menuItem: 'Light Novel', placeholder: 'Search by light novel name' },\n  { menuItem: 'Visual Novel', placeholder: 'Search by visual novel name' },\n  { menuItem: 'Doujin', placeholder: 'Search by doujin digits' },\n];\n\nconst Search = ({ index, setIndex, setQuery, handleClick }: SearchProps): React.ReactElement => {\n  const [placeholder, setPlaceholder] = useState<string>('Search');\n\n  useEffect(() => {\n    setPlaceholder(panes[index].placeholder);\n  }, [index]);\n\n  const handleTabChange = (event: React.MouseEvent<HTMLDivElement>, data: TabProps) => {\n    setIndex(data.activeIndex as number);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      handleClick();\n    }\n  };\n\n  return (\n    <Container style={{ width: '50%' }}>\n      <Segment inverted style={{ overflow: 'auto', margin: 'auto', padding: '1px' }}>\n        <Tab\n          panes={panes}\n          menu={{\n            attached: true,\n            tabular: true,\n            inverted: true,\n          }}\n          renderActiveOnly\n          onTabChange={handleTabChange}\n        />\n      </Segment>\n      <Input\n        action={{\n          icon: 'search',\n          onClick: () => {\n            handleClick();\n          },\n        }}\n        style={{ width: '100%' }}\n        size=\"small\"\n        placeholder={placeholder}\n        inverted\n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n      />\n    </Container>\n  );\n};\n\nexport default Search;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader } from 'semantic-ui-react';\n\ninterface AnimeProps {\n  query: string;\n  active: string | null;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Anime = forwardRef(({ query, active }: AnimeProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [source, setSource] = useState<string>('');\n  const [episodes, setEpisodes] = useState<number>(0);\n  const [status, setStatus] = useState<string>('');\n  const [premiered, setPremiered] = useState<string>('');\n  const [aired, setAired] = useState<string>('');\n  const [duration, setDuration] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [studios, setStudios] = useState<string[]>([]);\n  const [genres, setGenres] = useState<string[]>([]);\n  const [openings, setOpenings] = useState<string[]>([]);\n  const [endings, setEndings] = useState<string[]>([]);\n\n  const fetchData = async () => {\n    const loader = (\n      <Loader key=\"loader\" active inline=\"centered\" size=\"large\">\n        Searching\n      </Loader>\n    );\n    setMessage(loader);\n    setFound(false);\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '{' && last === '}' ? query.slice(1, -1) : query;\n\n    const response = await fetch(`${api}/anime/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setSource(data.source);\n      setEpisodes(data.episodes ? data.episodes : '?');\n      setStatus(data.status);\n      setPremiered(data.premiered);\n      setAired(data.aired ? data.aired.string : '?');\n      setDuration(data.duration);\n      setRating(data.rating);\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setStudios(data.studios);\n      setGenres(data.genres);\n      setOpenings(data.openings);\n      setEndings(data.endings);\n    } else {\n      setFound(false);\n      setMessage('Anime not found');\n    }\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      fetchData,\n    };\n  });\n\n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{ marginBottom: '10px' }}>\n          <span className=\"bold\">{name}</span>\n          {data}\n        </Grid.Row>\n      );\n    }\n\n    return null;\n  };\n\n  if (active === 'anime') {\n    if (found)\n      return (\n        <Container className=\"smaller-font\">\n          <Grid columns={2} textAlign=\"left\">\n            <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n              <Image\n                src={imageUrl}\n                fluid\n                label={{\n                  color: 'blue',\n                  content: score,\n                  icon: 'star',\n                  ribbon: true,\n                }}\n              />\n            </Grid.Column>\n            <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <Header inverted textAlign=\"left\">\n                  <a href={url} className=\"link\">\n                    {title}\n                  </a>\n                </Header>\n              </Grid.Row>\n              {textGridRow('English Title: ', titleEnglish)}\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <span className=\"bold\">Type: </span>\n                {type} | <span className=\"bold\">Episodes: </span>\n                {episodes}\n              </Grid.Row>\n              {textGridRow('Status: ', status)}\n              {textGridRow('Rating: ', rating)}\n              {textGridRow('Studios: ', studios.join(', '))}\n              {textGridRow('Source: ', source)}\n              {textGridRow('Duration: ', duration)}\n              {textGridRow('Season: ', premiered)}\n              {textGridRow('Aired: ', aired)}\n              {textGridRow('Genres: ', genres.join(', '))}\n            </Grid.Column>\n          </Grid>\n          <Grid columns={1} textAlign=\"left\">\n            <Grid.Column>\n              <span className=\"bold\">Synopsis:</span> {synopsis}\n            </Grid.Column>\n            <Grid.Column>\n              {Object.entries(relations).map((r) => {\n                return textGridRow(`${r[0]}: `, r[1].join(', '));\n              })}\n            </Grid.Column>\n            <Grid.Column>\n              <Grid.Row style={{ marginBottom: '5px' }}>\n                <span className=\"bold\">Openings</span>\n              </Grid.Row>\n              {openings && openings.length > 0\n                ? openings.map((x, i) => {\n                    return (\n                      <Grid.Row key={`op${i + 1}`} style={{ marginBottom: '5px' }}>\n                        {i + 1}. {x}\n                      </Grid.Row>\n                    );\n                  })\n                : 'None'}\n            </Grid.Column>\n            <Grid.Column>\n              <Grid.Row style={{ marginBottom: '5px' }}>\n                <span className=\"bold\">Endings</span>\n              </Grid.Row>\n              {endings && endings.length > 0\n                ? endings.map((x, i) => {\n                    return (\n                      <Grid.Row key={`ed${i + 1}`} style={{ marginBottom: '5px' }}>\n                        {i + 1}. {x}\n                      </Grid.Row>\n                    );\n                  })\n                : 'None'}\n            </Grid.Column>\n          </Grid>\n        </Container>\n      );\n\n    return <div>{message}</div>;\n  }\n\n  return <div />;\n});\n\nexport default Anime;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader } from 'semantic-ui-react';\n\ninterface MangaProps {\n  query: string;\n  active: string | null;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Manga = forwardRef(({ query, active }: MangaProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [volumes, setVolumes] = useState<number | string>(0);\n  const [chapters, setChapters] = useState<number | string>(0);\n  const [status, setStatus] = useState<string>('');\n  const [published, setPublished] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [genres, setGenres] = useState<string[]>([]);\n  const [authors, setAuthors] = useState<string[]>([]);\n  const [serializations, setSerializations] = useState<string[]>([]);\n\n  const fetchData = async () => {\n    const loader = (\n      <Loader key=\"loader\" active inline=\"centered\" size=\"large\">\n        Searching\n      </Loader>\n    );\n    setMessage(loader);\n    setFound(false);\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '<' && last === '>' ? query.slice(1, -1) : query;\n\n    const response = await fetch(`${api}/manga/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setVolumes(data.volumes ? data.volumes : '?');\n      setChapters(data.chapters ? data.chapters : '?');\n      setStatus(data.status);\n      setPublished(data.published ? data.published.string : '');\n      setRating(data.rating);\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setGenres(data.genres);\n      setAuthors(data.authors);\n      setSerializations(data.serializations);\n    } else {\n      setFound(false);\n      setMessage('Manga not found');\n    }\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      fetchData,\n    };\n  });\n\n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{ marginBottom: '10px' }}>\n          <span className=\"bold\">{name}</span>\n          {data}\n        </Grid.Row>\n      );\n    }\n\n    return null;\n  };\n\n  const nameConverter = (names: string[]) => {\n    return names.map((n) => n.split(', ').reverse().join(' ')).join(', ');\n  };\n\n  if (active === 'manga') {\n    if (found)\n      return (\n        <Container className=\"smaller-font\">\n          <Grid columns={2} textAlign=\"left\">\n            <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n              <Image\n                src={imageUrl}\n                fluid\n                label={{\n                  color: 'blue',\n                  content: score,\n                  icon: 'star',\n                  ribbon: true,\n                }}\n              />\n            </Grid.Column>\n            <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <Header inverted textAlign=\"left\">\n                  <a href={url} className=\"link\">\n                    {title}\n                  </a>\n                </Header>\n              </Grid.Row>\n              {textGridRow('English Title: ', titleEnglish)}\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <span className=\"bold\">Type: </span>\n                {type} | <span className=\"bold\">Status: </span>\n                {status}\n              </Grid.Row>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <span className=\"bold\">Volumes: </span>\n                {volumes} | <span className=\"bold\">Chapters: </span>\n                {chapters}\n              </Grid.Row>\n              {textGridRow('Rating: ', rating)}\n              {textGridRow('Published: ', published)}\n              {textGridRow('Authors: ', nameConverter(authors))}\n              {textGridRow('Serializations: ', serializations.join(', '))}\n              {textGridRow('Genres: ', genres.join(', '))}\n            </Grid.Column>\n          </Grid>\n          <Grid columns={1} textAlign=\"left\">\n            <Grid.Column>\n              <span className=\"bold\">Synopsis:</span> {synopsis}\n            </Grid.Column>\n            <Grid.Column>\n              {Object.entries(relations).map((r) => {\n                return textGridRow(`${r[0]}: `, r[1].join(', '));\n              })}\n            </Grid.Column>\n          </Grid>\n        </Container>\n      );\n\n    return <div>{message}</div>;\n  }\n\n  return <div />;\n});\n\nexport default Manga;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader } from 'semantic-ui-react';\n\ninterface LightNovelProps {\n  query: string;\n  active: string | null;\n}\n\ninterface Relations {\n  [key: string]: string[];\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst LightNovel = forwardRef(({ query, active }: LightNovelProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [title, setTitle] = useState<string>('');\n  const [titleEnglish, setTitleEnglish] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [volumes, setVolumes] = useState<number | string>(0);\n  const [chapters, setChapters] = useState<number | string>(0);\n  const [status, setStatus] = useState<string>('');\n  const [published, setPublished] = useState<string>('');\n  const [rating, setRating] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n  const [synopsis, setSynopsis] = useState<string>('');\n  const [relations, setRelations] = useState<Relations>({});\n  const [genres, setGenres] = useState<string[]>([]);\n  const [authors, setAuthors] = useState<string[]>([]);\n\n  const fetchData = async () => {\n    const loader = (\n      <Loader key=\"loader\" active inline=\"centered\" size=\"large\">\n        Searching\n      </Loader>\n    );\n    setMessage(loader);\n    setFound(false);\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '[' && last === ']' ? query.slice(1, -1) : query;\n\n    const response = await fetch(`${api}/ln/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setTitle(data.title);\n      setTitleEnglish(data.title_english);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setType(data.type);\n      setVolumes(data.volumes ? data.volumes : '?');\n      setChapters(data.chapters ? data.chapters : '?');\n      setStatus(data.status);\n      setPublished(data.published ? data.published.string : '');\n      setRating(data.rating);\n      setScore(data.score);\n      setSynopsis(data.synopsis);\n      setRelations(data.relations);\n      setGenres(data.genres);\n      setAuthors(data.authors);\n    } else {\n      setFound(false);\n      setMessage('Light novel not found');\n    }\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      fetchData,\n    };\n  });\n\n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{ marginBottom: '10px' }}>\n          <span className=\"bold\">{name}</span>\n          {data}\n        </Grid.Row>\n      );\n    }\n\n    return null;\n  };\n\n  const nameConverter = (names: string[]) => {\n    return names.map((n) => n.split(', ').reverse().join(' ')).join(', ');\n  };\n\n  if (active === 'light novel') {\n    if (found)\n      return (\n        <Container className=\"smaller-font\">\n          <Grid columns={2} textAlign=\"left\">\n            <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n              <Image\n                src={imageUrl}\n                fluid\n                label={{\n                  color: 'blue',\n                  content: score,\n                  icon: 'star',\n                  ribbon: true,\n                }}\n              />\n            </Grid.Column>\n            <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <Header inverted textAlign=\"left\">\n                  <a href={url} className=\"link\">\n                    {title}\n                  </a>\n                </Header>\n              </Grid.Row>\n              {textGridRow('English Title: ', titleEnglish)}\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <span className=\"bold\">Type: </span>\n                {type} | <span className=\"bold\">Status: </span>\n                {status}\n              </Grid.Row>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <span className=\"bold\">Volumes: </span>\n                {volumes} | <span className=\"bold\">Chapters: </span>\n                {chapters}\n              </Grid.Row>\n              {textGridRow('Rating: ', rating)}\n              {textGridRow('Published: ', published)}\n              {textGridRow('Authors: ', nameConverter(authors))}\n              {textGridRow('Genres: ', genres.join(', '))}\n            </Grid.Column>\n          </Grid>\n          <Grid columns={1} textAlign=\"left\">\n            <Grid.Column>\n              <span className=\"bold\">Synopsis:</span> {synopsis}\n            </Grid.Column>\n            <Grid.Column>\n              {Object.entries(relations).map((r) => {\n                return textGridRow(`${r[0]}: `, r[1].join(', '));\n              })}\n            </Grid.Column>\n          </Grid>\n        </Container>\n      );\n\n    return <div>{message}</div>;\n  }\n\n  return <div />;\n});\n\nexport default LightNovel;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Container, Grid, Image, Header, Loader, Dimmer, Button } from 'semantic-ui-react';\n\ninterface VisualNovelProps {\n  query: string;\n  active: string | null;\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst VisualNovel = forwardRef(({ query, active }: VisualNovelProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n  const [blurred, setBlurred] = useState<boolean>(true);\n\n  const [title, setTitle] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [imageNSFW, setImageNSFW] = useState<boolean>(false);\n  const [released, setReleased] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [tags, setTags] = useState<string[]>([]);\n  const [staff, setStaff] = useState<string[]>([]);\n  const [anime, setAnime] = useState<boolean>(false);\n  const [length, setLength] = useState<string>('');\n  const [score, setScore] = useState<number | string>(0);\n\n  const fetchData = async () => {\n    const loader = (\n      <Loader key=\"loader\" active inline=\"centered\" size=\"large\">\n        Searching\n      </Loader>\n    );\n    setMessage(loader);\n    setFound(false);\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '|' && last === '|' ? query.slice(1, -1) : query;\n\n    const response = await fetch(`${api}/vn/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setBlurred(true);\n      setTitle(data.title);\n      setUrl(data.url);\n      setImageUrl(data.image);\n      setImageNSFW(data.image_nsfw);\n      setDescription(data.description);\n      setTags(data.tags);\n      setStaff(data.staff);\n      setAnime(data.anime);\n      setLength(data.length);\n      setScore(data.score);\n      const releasedDate = data.released ? new Date(data.released) : null;\n      if (releasedDate) {\n        setReleased(\n          releasedDate.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n          })\n        );\n      } else {\n        setReleased('?');\n      }\n    } else {\n      setFound(false);\n      setMessage('Visual novel not found');\n    }\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      fetchData,\n    };\n  });\n\n  const textGridRow = (name: string, data: string) => {\n    if (data && data !== '') {\n      return (\n        <Grid.Row key={name} style={{ marginBottom: '10px' }}>\n          <span className=\"bold\">{name}</span>\n          {data}\n        </Grid.Row>\n      );\n    }\n\n    return null;\n  };\n\n  if (active === 'visual novel') {\n    if (found) {\n      return (\n        <Container className=\"smaller-font\">\n          <Grid columns={2} textAlign=\"left\">\n            <Grid.Column largeScreen={4} tablet={6} mobile={6}>\n              {!imageNSFW ? (\n                <Image\n                  src={imageUrl}\n                  fluid\n                  label={{\n                    color: 'blue',\n                    content: score,\n                    icon: 'star',\n                    ribbon: true,\n                  }}\n                />\n              ) : (\n                <Dimmer.Dimmable as={Image} fluid blurring dimmed={blurred}>\n                  <Dimmer active={blurred}>\n                    <Header as=\"h2\" inverted>\n                      NSFW\n                    </Header>\n                    <Button\n                      onClick={() => {\n                        setBlurred(false);\n                      }}\n                    >\n                      View\n                    </Button>\n                  </Dimmer>\n                  <Image\n                    src={imageUrl}\n                    fluid\n                    label={{\n                      color: 'blue',\n                      content: score,\n                      icon: 'star',\n                      ribbon: true,\n                    }}\n                    onClick={() => setBlurred(true)}\n                  />\n                </Dimmer.Dimmable>\n              )}\n            </Grid.Column>\n            <Grid.Column largeScreen={10} tablet={9} mobile={9}>\n              <Grid.Row style={{ marginBottom: '10px' }}>\n                <Header inverted textAlign=\"left\">\n                  <a href={url} className=\"link\">\n                    {title}\n                  </a>\n                </Header>\n              </Grid.Row>\n              {textGridRow('Type: ', 'Visual Novel')}\n              {textGridRow('Released: ', released)}\n              {textGridRow('Length: ', length)}\n              {textGridRow('Anime Adaptation: ', anime ? 'Yes' : 'No')}\n              {textGridRow('Staff: ', staff.join(', '))}\n              {textGridRow('Tags: ', tags.slice(0, 20).join(', '))}\n            </Grid.Column>\n          </Grid>\n          <Grid columns={1} textAlign=\"left\">\n            {description ? (\n              <Grid.Column>\n                <span className=\"bold\">Description:</span> {description}\n              </Grid.Column>\n            ) : null}\n          </Grid>\n        </Container>\n      );\n    }\n\n    return <div>{message}</div>;\n  }\n\n  return <div />;\n});\n\nexport default VisualNovel;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Grid, Header, Loader } from 'semantic-ui-react';\n\ninterface DoujinProps {\n  query: string;\n  active: string | null;\n}\n\nconst api = process.env.REACT_APP_API_SERVER;\n\nconst Doujin = forwardRef(({ query, active }: DoujinProps, ref) => {\n  const [found, setFound] = useState<boolean>(false);\n  const [message, setMessage] = useState<string | React.ReactElement>('');\n\n  const [id, setId] = useState<number>(0);\n  const [title, setTitle] = useState<string>('');\n  const [uploadDate, setUploadDate] = useState<string>('');\n  const [pages, setPages] = useState(0);\n  const [characters, setCharacters] = useState([]);\n  const [parodies, setParodies] = useState([]);\n  const [tags, setTags] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [url, setUrl] = useState('');\n\n  const fetchData = async () => {\n    const loader = (\n      <Loader key=\"loader\" active inline=\"centered\" size=\"large\">\n        Searching\n      </Loader>\n    );\n    setMessage(loader);\n    setFound(false);\n\n    const first = query.charAt(0);\n    const last = query.slice(-1);\n    const search = first === '(' && last === ')' ? query.slice(1, -1) : query;\n\n    const response = await fetch(`${api}/doujin/${search}`);\n    if (response.status === 200) {\n      const data = await response.json();\n      setFound(true);\n      setId(data.id);\n      setTitle(data.title);\n      setPages(data.pages);\n      setCharacters(data.characters);\n      setParodies(data.parodies);\n      setTags(data.tags);\n      setArtists(data.artists);\n      setGroups(data.groups);\n      setLanguages(data.languages);\n      setCategories(data.categories);\n      setUrl(data.url);\n      const upload = data.upload_date ? new Date(data.upload_date) : null;\n      if (upload) {\n        setUploadDate(\n          upload.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })\n        );\n      } else {\n        setUploadDate('?');\n      }\n    } else {\n      setFound(false);\n      setMessage('Doujin not found');\n    }\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      fetchData,\n    };\n  });\n\n  const arrayGridColumn = (name: string, array: string[]) => {\n    if (array && array.length > 0) {\n      return (\n        <Grid.Column>\n          <span className=\"bold\">{name}</span>\n          {array.join(', ')}\n        </Grid.Column>\n      );\n    }\n\n    return null;\n  };\n\n  if (active === 'doujin') {\n    if (found) {\n      return (\n        <Grid columns={1} textAlign=\"left\">\n          <Grid.Column>\n            <Header inverted textAlign=\"left\">\n              <a href={url} className=\"link\">\n                {id}\n              </a>\n            </Header>\n          </Grid.Column>\n          <Grid.Column>\n            <span className=\"bold\">Title: </span>\n            {title}\n          </Grid.Column>\n          <Grid.Column>\n            <span className=\"bold\">Pages: </span>\n            {pages}\n          </Grid.Column>\n          <Grid.Column>\n            <span className=\"bold\">Upload Date: </span>\n            {uploadDate}\n          </Grid.Column>\n          {arrayGridColumn('Characters: ', characters)}\n          {arrayGridColumn('Parodies: ', parodies)}\n          {arrayGridColumn('Tags: ', tags)}\n          {arrayGridColumn('Artists: ', artists)}\n          {arrayGridColumn('Groups: ', groups)}\n          {arrayGridColumn('Languages: ', languages)}\n          {arrayGridColumn('Categories: ', categories)}\n        </Grid>\n      );\n    }\n\n    return <div>{message}</div>;\n  }\n\n  return <div />;\n});\n\nexport default Doujin;\n","import React from 'react';\n\ninterface ErrorMessageProps {\n  active: string | null;\n  message: string;\n}\n\nconst ErrorMessage = ({ active, message }: ErrorMessageProps): React.ReactElement => {\n  return <div>{active === 'error' ? message : null}</div>;\n};\n\nexport default ErrorMessage;\n","import React, { useState, useRef } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport Title from './components/Title';\nimport Search from './components/Search';\nimport Anime from './components/Anime';\nimport Manga from './components/Manga';\nimport LightNovel from './components/LightNovel';\nimport VisualNovel from './components/VisualNovel';\nimport Doujin from './components/Doujin';\nimport ErrorMessage from './components/ErrorMessage';\nimport './App.css';\n\ninterface fetchDataRef {\n  fetchData: () => Promise<void>;\n}\n\nconst parsePattern = (query: string) => {\n  if (query.length <= 2) {\n    return -1;\n  }\n\n  const first = query.charAt(0);\n  const last = query.slice(-1);\n  if (first === '{' && last === '}') {\n    return 1;\n  }\n  if (first === '<' && last === '>') {\n    return 2;\n  }\n  if (first === '[' && last === ']') {\n    return 3;\n  }\n  if (first === '|' && last === '|') {\n    return 4;\n  }\n  if (first === '(' && last === ')') {\n    return 5;\n  }\n\n  return -1;\n};\n\nfunction App(): React.ReactElement {\n  const [index, setIndex] = useState<number>(0);\n  const [query, setQuery] = useState<string>('');\n  const [active, setActive] = useState<string | null>(null);\n  const [message, setMessage] = useState<string>('');\n\n  const animeRef = useRef<fetchDataRef>(null);\n  const mangaRef = useRef<fetchDataRef>(null);\n  const lightNovelRef = useRef<fetchDataRef>(null);\n  const visualNovelRef = useRef<fetchDataRef>(null);\n  const doujinRef = useRef<fetchDataRef>(null);\n\n  const handleClick = () => {\n    if (!query || !/\\S/.test(query)) {\n      setActive(null);\n      return;\n    }\n    const currentIndex = index > 0 && index <= 5 ? index : parsePattern(query);\n    switch (currentIndex) {\n      case 1:\n        setActive('anime');\n        if (animeRef.current) {\n          animeRef.current.fetchData();\n        }\n        break;\n      case 2:\n        setActive('manga');\n        if (mangaRef.current) {\n          mangaRef.current.fetchData();\n        }\n        break;\n      case 3:\n        setActive('light novel');\n        if (lightNovelRef.current) {\n          lightNovelRef.current.fetchData();\n        }\n        break;\n      case 4:\n        setActive('visual novel');\n        if (visualNovelRef.current) {\n          visualNovelRef.current.fetchData();\n        }\n        break;\n      case 5:\n        setActive('doujin');\n        if (doujinRef.current) {\n          doujinRef.current.fetchData();\n        }\n        break;\n      default:\n        setActive('error');\n        setMessage('Invalid search pattern');\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Title title=\"Sauce Searcher\" />\n      <Search index={index} setIndex={setIndex} setQuery={setQuery} handleClick={handleClick} />\n      <Container\n        style={{\n          margin: '30px',\n          padding: '30px',\n          border: active ? '2px solid white' : 'none',\n          lineHeight: 'normal',\n        }}\n      >\n        <Anime ref={animeRef} query={query} active={active} />\n        <Manga ref={mangaRef} query={query} active={active} />\n        <LightNovel ref={lightNovelRef} query={query} active={active} />\n        <VisualNovel ref={visualNovelRef} query={query} active={active} />\n        <Doujin ref={doujinRef} query={query} active={active} />\n        <ErrorMessage active={active} message={message} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}